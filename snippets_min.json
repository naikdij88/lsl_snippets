[{"Vector":{"prefix":"vector","body":["vector ${0}"],"description":"type Vector"}},{"Integer":{"prefix":"integer","body":["integer ${0}"],"description":"type Integer"}},{"Float":{"prefix":"float","body":["float ${0}"],"description":"type Float"}},{"Key":{"prefix":"key","body":["key ${0}"],"description":"type Key"}},{"List":{"prefix":"list","body":["list ${0}"],"description":"type List"}},{"Rotation":{"prefix":"rotation","body":["rotation ${0}"],"description":"type Rotation"}},{"String":{"prefix":"string","body":["string ${0}"],"description":"type String"}},{"llAbs":{"prefix":"llAbs","body":["llAbs(${0})"],"description":"Returns an integer that is the positive version of val.\ninteger llAbs( integer val );"}},{"llAcos":{"prefix":"llAcos","body":["llAcos(${0})"],"description":"Returns a float that is the arccosine in radians of val\nfloat llAcos( float val );"}},{"llAddToLandBanList":{"prefix":"llAddToLandBanList","body":["llAddToLandBanList(${0})"],"description":"Add avatar to the land ban list for hours, or indefinitely if hours is zero.\nllAddToLandBanList( key avatar, float hours );"}},{"llAddToLandPassList":{"prefix":"llAddToLandPassList","body":["llAddToLandPassList(${0})"],"description":"Add avatar to the land pass list for hours, or indefinitely if hours is zero.\nllAddToLandPassList( key avatar, float hours );"}},{"llAdjustSoundVolume":{"prefix":"llAdjustSoundVolume","body":["llAdjustSoundVolume(${0})"],"description":"Adjusts volume of attached sound.\nllAdjustSoundVolume( float volume );"}},{"llAgentInExperience":{"prefix":"llAgentInExperience","body":["llAgentInExperience(${0})"],"description":"Determines whether or not the specified agent is in the script's experience.Returns a boolean (an integer) that is TRUE if the agent is in the experience and the experience can run in the current region.\ninteger llAgentInExperience( key agent );"}},{"llAllowInventoryDrop":{"prefix":"llAllowInventoryDrop","body":["llAllowInventoryDrop(${0})"],"description":"Allows for all users without modify permissions to add inventory items to a prim.\nllAllowInventoryDrop( integer add );"}},{"llAngleBetween":{"prefix":"llAngleBetween","body":["llAngleBetween(${0})"],"description":"Returns a float that is the angle in radians between rotation a and rotation b.\nfloat llAngleBetween( rotation a, rotation b );"}},{"llApplyImpulse":{"prefix":"llApplyImpulse","body":["llApplyImpulse(${0})"],"description":"Applies impulse to object\nllApplyImpulse( vector momentum, integer local );"}},{"llApplyRotationalImpulse":{"prefix":"llApplyRotationalImpulse","body":["llApplyRotationalImpulse(${0})"],"description":"Applies rotational impulse to object.\nllApplyRotationalImpulse( vector force, integer local );"}},{"llAsin":{"prefix":"llAsin","body":["llAsin(${0})"],"description":"Returns a float that is the arcsine in radians of val\nfloat llAsin( float val );"}},{"llAtan2":{"prefix":"llAtan2","body":["llAtan2(${0})"],"description":"Returns a float that is the arctangent2 of y, x.\nfloat llAtan2( float y, float x );"}},{"llAttachToAvatar":{"prefix":"llAttachToAvatar","body":["llAttachToAvatar(${0})"],"description":"Attaches the object to the avatar who has granted permission to the script. The object is taken into the users inventory and attached to attach_point.\nllAttachToAvatar( integer attach_point );"}},{"llAttachToAvatarTemp":{"prefix":"llAttachToAvatarTemp","body":["llAttachToAvatarTemp(${0})"],"description":"Follows the same convention as llAttachToAvatar, with the exception that the object will not create new inventory for the user, and will disappear on detach or disconnect. Also, this function can be used on avis other than the owner (if granted permission) in which case the ownership is changed to the new wearer.\nllAttachToAvatarTemp( integer attach_point );"}},{"llAvatarOnLinkSitTarget":{"prefix":"llAvatarOnLinkSitTarget","body":["llAvatarOnLinkSitTarget(${0})"],"description":"Returns a key that is the UUID of the user seated on the prim.\nkey llAvatarOnLinkSitTarget( integer link );"}},{"llAvatarOnSitTarget":{"prefix":"llAvatarOnSitTarget","body":["llAvatarOnSitTarget(${0})"],"description":"Returns a key that is the UUID of the user seated on the prim.\nkey llAvatarOnSitTarget(  );"}},{"llAxes2Rot":{"prefix":"llAxes2Rot","body":["llAxes2Rot(${0})"],"description":"Returns a rotation that is defined by the 3 coordinate axes\nrotation llAxes2Rot( vector fwd, vector left, vector up );"}},{"llAxisAngle2Rot":{"prefix":"llAxisAngle2Rot","body":["llAxisAngle2Rot(${0})"],"description":"Returns a rotation that is a generated angle about axis\nrotation llAxisAngle2Rot( vector axis, float angle );"}},{"llBase64ToInteger":{"prefix":"llBase64ToInteger","body":["llBase64ToInteger(${0})"],"description":"Returns an integer that is str Base64 decoded as a big endian integer.\ninteger llBase64ToInteger( string str );"}},{"llBase64ToString":{"prefix":"llBase64ToString","body":["llBase64ToString(${0})"],"description":"Returns a string that is the Base64 str decoded into a conventional string.\nstring llBase64ToString( string str );"}},{"llBreakAllLinks":{"prefix":"llBreakAllLinks","body":["llBreakAllLinks(${0})"],"description":"Delinks all prims in the link set.\nllBreakAllLinks(  );"}},{"llBreakLink":{"prefix":"llBreakLink","body":["llBreakLink(${0})"],"description":"Delinks the prim with the given link number in a linked object set\nllBreakLink( integer link );"}},{"llCastRay":{"prefix":"llCastRay","body":["llCastRay(${0})"],"description":"Cast a ray from start to end and report collision data for intersections with objectsReturns a list of strided values with an additional integer status_code on the end. Each stride consists of two mandatory values {key uuid, vector position} and possibly some optional values {integer link_number, vector normal} see RC_DATA_FLAGS for details. The status_code if it is negative is an error code, otherwise it is the number of hits (and strides) returned.\nlist llCastRay( vector start, vector end, list options );"}},{"llCeil":{"prefix":"llCeil","body":["llCeil(${0})"],"description":"Returns an integer that is the integer value of val rounded towards positive infinity (return >= val).\ninteger llCeil( float val );"}},{"llClearCameraParams":{"prefix":"llClearCameraParams","body":["llClearCameraParams(${0})"],"description":"Resets all camera parameters to default values and turns off scripted camera control.\nllClearCameraParams(  );"}},{"llClearLinkMedia":{"prefix":"llClearLinkMedia","body":["llClearLinkMedia(${0})"],"description":"Clears (deletes) the media and all params from the given face on the linked prim(s).Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation.\ninteger llClearLinkMedia( integer link, integer face );"}},{"llClearPrimMedia":{"prefix":"llClearPrimMedia","body":["llClearPrimMedia(${0})"],"description":"Clears (deletes) the media and all params from the given face.Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation.\ninteger llClearPrimMedia( integer face );"}},{"llCloseRemoteDataChannel":{"prefix":"llCloseRemoteDataChannel","body":["llCloseRemoteDataChannel(${0})"],"description":"Closes XML-RPC channel.\nllCloseRemoteDataChannel( key channel );"}},{"llCollisionFilter":{"prefix":"llCollisionFilter","body":["llCollisionFilter(${0})"],"description":"Sets the collision filter, exclusively or inclusively.\nllCollisionFilter( string name, key id, integer accept );"}},{"llCollisionSound":{"prefix":"llCollisionSound","body":["llCollisionSound(${0})"],"description":"Suppress default collision sounds, replace default impact sounds with impact_sound at the volume impact_volume\nllCollisionSound( string impact_sound, float impact_volume );"}},{"llCollisionSprite":{"prefix":"llCollisionSprite","body":["llCollisionSprite(${0})"],"description":"Suppress default collision sprites, replace default impact sprite with impact_sprite\nllCollisionSprite( string impact_sprite );"}},{"llCos":{"prefix":"llCos","body":["llCos(${0})"],"description":"Returns a float that is the cosine of theta.\nfloat llCos( float theta );"}},{"llCreateCharacter":{"prefix":"llCreateCharacter","body":["llCreateCharacter(${0})"],"description":"Creates a pathfinding entity, known as a \"character\", from the object containing the script.  Required to activate use of pathfinding functions.\nllCreateCharacter( list options );"}},{"llCreateKeyValue":{"prefix":"llCreateKeyValue","body":["llCreateKeyValue(${0})"],"description":"Start an asynchronous transaction to create a key-value pair associated with the script's Experience using the given key (k) and value (v).Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed.\nkey llCreateKeyValue( string k, string v );"}},{"llCreateLink":{"prefix":"llCreateLink","body":["llCreateLink(${0})"],"description":"Attempt to link the script's object with target.\nllCreateLink( key target, integer parent );"}},{"llCSV2List":{"prefix":"llCSV2List","body":["llCSV2List(${0})"],"description":"This function takes a string of values separated by commas, and turns it into a list.Returns a list made by parsing src, a string of comma separated values.\nlist llCSV2List( string src );"}},{"llDataSizeKeyValue":{"prefix":"llDataSizeKeyValue","body":["llDataSizeKeyValue(${0})"],"description":"Start an asynchronous transaction to request the used and total amount of data allocated for the Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\nkey llDataSizeKeyValue(  );"}},{"llDeleteCharacter":{"prefix":"llDeleteCharacter","body":["llDeleteCharacter(${0})"],"description":"Convert the object back to a standard object, removing all pathfinding properties.\nllDeleteCharacter(  );"}},{"llDeleteKeyValue":{"prefix":"llDeleteKeyValue","body":["llDeleteKeyValue(${0})"],"description":"Start an asynchronous transaction to delete a key-value pair associated with the script's Experience with the given key (k).Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\nkey llDeleteKeyValue( string k );"}},{"llDeleteSubList":{"prefix":"llDeleteSubList","body":["llDeleteSubList(${0})"],"description":"Returns a list that is a copy of src but with the slice from start to end removed.\nlist llDeleteSubList( list src, integer start, integer end );"}},{"llDeleteSubString":{"prefix":"llDeleteSubString","body":["llDeleteSubString(${0})"],"description":"Returns a string that is the result of removing characters from src from start to end.\nstring llDeleteSubString( string src, integer start, integer end );"}},{"llDetachFromAvatar":{"prefix":"llDetachFromAvatar","body":["llDetachFromAvatar(${0})"],"description":"Detach object from avatar.\nllDetachFromAvatar(  );"}},{"llDetectedGrab":{"prefix":"llDetectedGrab","body":["llDetectedGrab(${0})"],"description":"Returns a vector that is the grab offset of the user touching the object; only works in the touch event.\nvector llDetectedGrab( integer number );"}},{"llDetectedGroup":{"prefix":"llDetectedGroup","body":["llDetectedGroup(${0})"],"description":"Returns an integer that is TRUE if the detected object or agent has the same active group as the prim containing the script. Otherwise FALSE is returned.\ninteger llDetectedGroup( integer number );"}},{"llDetectedKey":{"prefix":"llDetectedKey","body":["llDetectedKey(${0})"],"description":"Returns a key that is the UUID of the detected object or avatar number.\nkey llDetectedKey( integer number );"}},{"llDetectedLinkNumber":{"prefix":"llDetectedLinkNumber","body":["llDetectedLinkNumber(${0})"],"description":"Returns the link_number (an integer) of the triggered event. If not supported by the event, returns zero.\ninteger llDetectedLinkNumber( integer number );"}},{"llDetectedName":{"prefix":"llDetectedName","body":["llDetectedName(${0})"],"description":"Returns a string that is the name of the detected item.\nstring llDetectedName( integer item );"}},{"llDetectedOwner":{"prefix":"llDetectedOwner","body":["llDetectedOwner(${0})"],"description":"Returns the key (UUID) of the owner of the object.\nkey llDetectedOwner( integer number );"}},{"llDetectedPos":{"prefix":"llDetectedPos","body":["llDetectedPos(${0})"],"description":"Returns a vector that is the position (in region coordinates) of detected object number.\nvector llDetectedPos( integer number );"}},{"llDetectedRot":{"prefix":"llDetectedRot","body":["llDetectedRot(${0})"],"description":"Returns the rotation of detected object number.\nrotation llDetectedRot( integer number );"}},{"llDetectedTouchBinormal":{"prefix":"llDetectedTouchBinormal","body":["llDetectedTouchBinormal(${0})"],"description":"Returns a vector that is the surface binormal (tangent to the surface, pointing along the positive T (V) direction of tangent space) where the touch event was triggered.  Along with llDetectedTouchNormal, this information can be used to find the tangent space at the touch location.\nvector llDetectedTouchBinormal( integer index );"}},{"llDetectedTouchFace":{"prefix":"llDetectedTouchFace","body":["llDetectedTouchFace(${0})"],"description":"Returns an integer that is the index of the face the avatar clicked on.\ninteger llDetectedTouchFace( integer index );"}},{"llDetectedTouchNormal":{"prefix":"llDetectedTouchNormal","body":["llDetectedTouchNormal(${0})"],"description":"Returns a vector that is the surface normal (perpendicular to the surface) where the touch event was triggered.  Along with llDetectedTouchBinormal, this information can be used to find the tangent space at the touch location.\nvector llDetectedTouchNormal( integer index );"}},{"llDetectedTouchPos":{"prefix":"llDetectedTouchPos","body":["llDetectedTouchPos(${0})"],"description":"Returns the vector position where the object was touched in region coordinates, unless it is attached to the HUD, in which case it returns the position in screen space coordinates.\nvector llDetectedTouchPos( integer index );"}},{"llDetectedTouchST":{"prefix":"llDetectedTouchST","body":["llDetectedTouchST(${0})"],"description":"Returns a vector that is the surface coordinates for where the prim was touched. The x & y vector positions contain the horizontal (s) & vertical (t) face coordinates respectively (<s, t, 0.0>). Each component is usually in the interval [0.0,\u00a01.0] with the origin in the bottom left corner.[1] With some mesh objects, values of less than 0.0 and higher than 1.0 have been observed.\nvector llDetectedTouchST( integer index );"}},{"llDetectedTouchUV":{"prefix":"llDetectedTouchUV","body":["llDetectedTouchUV(${0})"],"description":"Returns a vector that is the texture coordinates for where the prim was touched. The x & y vector positions contain the horizontal (u) & vertical (v) texture coordinates respectively (<u, v, 0.0>). Like llDetectedTouchST, the interval of each component will be [0.0,\u00a01.0] unless the texture repeats are set to a non-default value. Increasing or decreasing the texture repeats of the face will change this interval accordingly. Additionally,  unlike with llDetectedTouchST, changing a texture's rotation will change the results of this function.\nvector llDetectedTouchUV( integer index );"}},{"llDetectedType":{"prefix":"llDetectedType","body":["llDetectedType(${0})"],"description":"Returns an integer mask that is the types of detected object or avatar.\ninteger llDetectedType( integer number );"}},{"llDetectedVel":{"prefix":"llDetectedVel","body":["llDetectedVel(${0})"],"description":"Returns the vector velocity of detected object or avatar number.\nvector llDetectedVel( integer number );"}},{"llDialog":{"prefix":"llDialog","body":["llDialog(${0})"],"description":"Shows a dialog box in the lower right corner of the avatar's screen (upper right in Viewer 1.x) with a message and choice buttons, as well as an ignore button. This has many uses ranging from simple message delivery to complex menu systems.\nllDialog( key avatar, string message, list buttons, integer channel );"}},{"llDie":{"prefix":"llDie","body":["llDie(${0})"],"description":"Deletes the object. The object does not go to the owners Inventory:Trash.\nllDie(  );"}},{"llDumpList2String":{"prefix":"llDumpList2String","body":["llDumpList2String(${0})"],"description":"Returns a string that is the list src converted to a string with separator between the entries.\nstring llDumpList2String( list src, string separator );"}},{"llEdgeOfWorld":{"prefix":"llEdgeOfWorld","body":["llEdgeOfWorld(${0})"],"description":"Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring simulator).Returns a boolean (an integer) value. FALSE indicating there is a simulator in the direction indicated.\ninteger llEdgeOfWorld( vector pos, vector dir );"}},{"llEjectFromLand":{"prefix":"llEjectFromLand","body":["llEjectFromLand(${0})"],"description":"Ejects avatar from the parcel.\nllEjectFromLand( key avatar );"}},{"llEmail":{"prefix":"llEmail","body":["llEmail(${0})"],"description":"Sends an email to address with subject and message.\nllEmail( string address, string subject, string message );"}},{"llEscapeURL":{"prefix":"llEscapeURL","body":["llEscapeURL(${0})"],"description":"Returns a string that is the escaped/encoded version of url, replacing spaces with \"%20\" etc. The function will escape any character not in [a-zA-Z0-9] to \"%xx\" where \"xx\" is the hexadecimal value of the character in UTF-8 byte form.\nstring llEscapeURL( string url );"}},{"llEuler2Rot":{"prefix":"llEuler2Rot","body":["llEuler2Rot(${0})"],"description":"Returns a rotation representation of the Euler Angles v.\nrotation llEuler2Rot( vector v );"}},{"llEvade":{"prefix":"llEvade","body":["llEvade(${0})"],"description":"Characters will (roughly) try to hide from their pursuers if there is a good hiding spot along their fleeing path. Hiding means no direct line of sight from the head of the character (center of the top of its physics bounding box) to the head of its pursuer and no direct path between the two on the navmesh.\nllEvade( key target, list options );"}},{"llExecCharacterCmd":{"prefix":"llExecCharacterCmd","body":["llExecCharacterCmd(${0})"],"description":"Send a command to the pathing system.\nllExecCharacterCmd( integer command, list options );"}},{"llFabs":{"prefix":"llFabs","body":["llFabs(${0})"],"description":"Returns a float that is the positive version of val.\nfloat llFabs( float val );"}},{"llFleeFrom":{"prefix":"llFleeFrom","body":["llFleeFrom(${0})"],"description":"Directs a character to keep a specific distance from a specific position in the region or adjacent regions.\nllFleeFrom( vector position, float distance, list options );"}},{"llFloor":{"prefix":"llFloor","body":["llFloor(${0})"],"description":"Returns an integer that is the integer value of val rounded towards negative infinity (return <= val).\ninteger llFloor( float val );"}},{"llForceMouselook":{"prefix":"llForceMouselook","body":["llForceMouselook(${0})"],"description":"Sets if a sitting avatar should be forced into mouselook when they sit on this prim.\nllForceMouselook( integer mouselook );"}},{"llFrand":{"prefix":"llFrand","body":["llFrand(${0})"],"description":"Returns a float that is pseudo random in the range [0.0,\u00a0mag) or (mag,\u00a00.0].[1] This means that the returned value can be any value in the range 0.0 to mag including 0.0, but not including the value of mag itself. The sign of mag matches the return.\nfloat llFrand( float mag );"}},{"llGenerateKey":{"prefix":"llGenerateKey","body":["llGenerateKey(${0})"],"description":"Generates a key using Version 5 (SHA-1 hash) UUID generation to create a unique key.Returns the key generated.\nkey llGenerateKey(  );"}},{"llGetAccel":{"prefix":"llGetAccel","body":["llGetAccel(${0})"],"description":"Returns a vector that is the acceleration of the object in the region frame of reference.\nvector llGetAccel(  );"}},{"llGetAgentInfo":{"prefix":"llGetAgentInfo","body":["llGetAgentInfo(${0})"],"description":"Returns a bit field (an integer) containing the agent information about id.\ninteger llGetAgentInfo( key id );"}},{"llGetAgentLanguage":{"prefix":"llGetAgentLanguage","body":["llGetAgentLanguage(${0})"],"description":"Returns a string that is the language code of the preferred interface language of the user avatar.\nstring llGetAgentLanguage( key avatar );"}},{"llGetAgentList":{"prefix":"llGetAgentList","body":["llGetAgentList(${0})"],"description":"Requests a list of agents currently in the region, limited by the scope parameter.Returns a list [key\u00a0id0, key\u00a0id1, ..., key\u00a0idn] or [string\u00a0error_msg] -  returns avatar keys for all agents in the region limited to the area(s) specified by scope\nlist llGetAgentList( integer scope, list options );"}},{"llGetAgentSize":{"prefix":"llGetAgentSize","body":["llGetAgentSize(${0})"],"description":"Returns a vector that is an estimated size of the requested avatar.\nvector llGetAgentSize( key avatar );"}},{"llGetAlpha":{"prefix":"llGetAlpha","body":["llGetAlpha(${0})"],"description":"Returns a float that is the alpha of face.\nfloat llGetAlpha( integer face );"}},{"llGetAndResetTime":{"prefix":"llGetAndResetTime","body":["llGetAndResetTime(${0})"],"description":"Returns a float that is script time in seconds and then resets the script time to zero.\nfloat llGetAndResetTime(  );"}},{"llGetAnimation":{"prefix":"llGetAnimation","body":["llGetAnimation(${0})"],"description":"Returns a string that is the name of the currently playing locomotion animation for avatar id. See the table below.\nstring llGetAnimation( key id );"}},{"llGetAnimationList":{"prefix":"llGetAnimationList","body":["llGetAnimationList(${0})"],"description":"Returns a list of keys of playing animations for avatar.\nlist llGetAnimationList( key avatar );"}},{"llGetAnimationOverride":{"prefix":"llGetAnimationOverride","body":["llGetAnimationOverride(${0})"],"description":"Returns a string that is the name of the animation that is being used for the specified animation state (anim_state).\nstring llGetAnimationOverride( string anim_state );"}},{"llGetAttached":{"prefix":"llGetAttached","body":["llGetAttached(${0})"],"description":"Returns the attach_point (an integer) the object is attached to or zero if it is either not attached or is pending detachment.\ninteger llGetAttached(  );"}},{"llGetAttachedList":{"prefix":"llGetAttachedList","body":["llGetAttachedList(${0})"],"description":"Returns a list of public attachments worn by an avatar.\nlist llGetAttachedList( key avatar );"}},{"llGetBoundingBox":{"prefix":"llGetBoundingBox","body":["llGetBoundingBox(${0})"],"description":"Returns a list that is the bounding box of object relative to its root prim, in local coordinates.Format: [ (vector) min_corner, (vector) max_corner ]\nlist llGetBoundingBox( key object );"}},{"llGetCameraPos":{"prefix":"llGetCameraPos","body":["llGetCameraPos(${0})"],"description":"Returns a vector that is the current camera position for the agent the task has permissions for.\nvector llGetCameraPos(  );"}},{"llGetCameraRot":{"prefix":"llGetCameraRot","body":["llGetCameraRot(${0})"],"description":"Returns a rotation that is the current camera orientation for the agent the task has permissions for.\nrotation llGetCameraRot(  );"}},{"llGetCenterOfMass":{"prefix":"llGetCenterOfMass","body":["llGetCenterOfMass(${0})"],"description":"Returns the vector position of the object's center of mass in region coordinates.\nvector llGetCenterOfMass(  );"}},{"llGetClosestNavPoint":{"prefix":"llGetClosestNavPoint","body":["llGetClosestNavPoint(${0})"],"description":"Used to get a point on the navmesh that is the closest point to point.Returns a list containing a single vector which is the closest point on the navmesh to the point provided or an empty list.\nlist llGetClosestNavPoint( vector point, list options );"}},{"llGetColor":{"prefix":"llGetColor","body":["llGetColor(${0})"],"description":"Returns a vector that is the color on face.\nvector llGetColor( integer face );"}},{"llGetCreator":{"prefix":"llGetCreator","body":["llGetCreator(${0})"],"description":"Returns a key for the creator of the prim.\nkey llGetCreator(  );"}},{"llGetDate":{"prefix":"llGetDate","body":["llGetDate(${0})"],"description":"Returns a string that is the current date in the UTC time zone in the format \"YYYY-MM-DD\".\nstring llGetDate(  );"}},{"llGetDisplayName":{"prefix":"llGetDisplayName","body":["llGetDisplayName(${0})"],"description":"Returns a string that is the non-unique display name of the avatar specified by id.\nstring llGetDisplayName( key id );"}},{"llGetEnergy":{"prefix":"llGetEnergy","body":["llGetEnergy(${0})"],"description":"Returns a float that is how much energy is in the object as a percentage of maximum\nfloat llGetEnergy(  );"}},{"llGetEnv":{"prefix":"llGetEnv","body":["llGetEnv(${0})"],"description":"Returns a string with the requested data about the region.\nstring llGetEnv( string name );"}},{"llGetExperienceDetails":{"prefix":"llGetExperienceDetails","body":["llGetExperienceDetails(${0})"],"description":"Returns a list of details about the experience. This list has 6 components: [string experience_name, key owner_id, key experience_id, integer state, string state_message, key group_id]\nlist llGetExperienceDetails( key experience_id );"}},{"llGetExperienceErrorMessage":{"prefix":"llGetExperienceErrorMessage","body":["llGetExperienceErrorMessage(${0})"],"description":"Returns a text description of a particular Experience LSL error constant.Returns a string describing the error code passed or the string corresponding to error. Returns XP_ERROR_UNKNOWN_ERROR if the error is not a valid error code.\nstring llGetExperienceErrorMessage( integer error );"}},{"llGetForce":{"prefix":"llGetForce","body":["llGetForce(${0})"],"description":"Returns a vector that is the force (if the script is physical)\nvector llGetForce(  );"}},{"llGetFreeMemory":{"description":"Returns the integer of the number of free bytes of memory the script can use.\ninteger llGetFreeMemory(  );","prefix":"llGetFreeMemory","body":["llGetFreeMemory(${0})"]}},{"llGetFreeURLs":{"description":"Returns an integer that is the number of available URLs.\ninteger llGetFreeURLs(  );","prefix":"llGetFreeURLs","body":["llGetFreeURLs(${0})"]}},{"llGetGeometricCenter":{"description":"Returns the vector that is the geometric center of the object relative to the root prim.\nvector llGetGeometricCenter(  );","prefix":"llGetGeometricCenter","body":["llGetGeometricCenter(${0})"]}},{"llGetGMTclock":{"description":"Returns a float that is the time in seconds since midnight GMT.  Value appears to be truncated to the second.\nfloat llGetGMTclock(  );","prefix":"llGetGMTclock","body":["llGetGMTclock(${0})"]}},{"llGetHTTPHeader":{"description":"Returns a string that is the value for header for request_id.\nstring llGetHTTPHeader( key request_id, string header );","prefix":"llGetHTTPHeader","body":["llGetHTTPHeader(${0})"]}},{"llGetInventoryCreator":{"description":"Returns a key of the creator of the inventory item.\nkey llGetInventoryCreator( string item );","prefix":"llGetInventoryCreator","body":["llGetInventoryCreator(${0})"]}},{"llGetInventoryKey":{"description":"Returns a key that is the UUID of the inventory name\nkey llGetInventoryKey( string name );","prefix":"llGetInventoryKey","body":["llGetInventoryKey(${0})"]}},{"llGetInventoryName":{"description":"Returns a string that is the name of the inventory item number of type. Returns an empty string if no item of the specified type is found in the prim's inventory (or there are less than or equal to number items of the type).\nstring llGetInventoryName( integer type, integer number );","prefix":"llGetInventoryName","body":["llGetInventoryName(${0})"]}},{"llGetInventoryNumber":{"description":"Returns an integer that is the number of items of a given type in the prims inventory.\ninteger llGetInventoryNumber( integer type );","prefix":"llGetInventoryNumber","body":["llGetInventoryNumber(${0})"]}},{"llGetInventoryPermMask":{"description":"Returns a bit field (an integer) of the requested permission category for the inventory item\ninteger llGetInventoryPermMask( string item, integer category );","prefix":"llGetInventoryPermMask","body":["llGetInventoryPermMask(${0})"]}},{"llGetInventoryType":{"description":"Returns an integer that is the type of the inventory item name\ninteger llGetInventoryType( string name );","prefix":"llGetInventoryType","body":["llGetInventoryType(${0})"]}},{"llGetKey":{"description":"Returns the key of the prim the script is in.\nkey llGetKey(  );","prefix":"llGetKey","body":["llGetKey(${0})"]}},{"llGetLandOwnerAt":{"description":"Returns a key that is the land owner at pos.\nkey llGetLandOwnerAt( vector pos );","prefix":"llGetLandOwnerAt","body":["llGetLandOwnerAt(${0})"]}},{"llGetLinkKey":{"description":"Returns the key of the linked prim link\nkey llGetLinkKey( integer link );","prefix":"llGetLinkKey","body":["llGetLinkKey(${0})"]}},{"llGetLinkMedia":{"description":"Get the media params for a particular face on a linked prim, given the desired list of named params.Returns a parameter list (a list) of values in the order requested.\nlist llGetLinkMedia( integer link, integer face, list params );","prefix":"llGetLinkMedia","body":["llGetLinkMedia(${0})"]}},{"llGetLinkName":{"description":"Returns a string that is the name of link in link set\nstring llGetLinkName( integer link );","prefix":"llGetLinkName","body":["llGetLinkName(${0})"]}},{"llGetLinkNumber":{"description":"Returns an integer that is the link number of the prim containing the script.\ninteger llGetLinkNumber(  );","prefix":"llGetLinkNumber","body":["llGetLinkNumber(${0})"]}},{"llGetLinkNumberOfSides":{"description":"Returns an integer that is the number of faces (or sides) of the prim link.\ninteger llGetLinkNumberOfSides( integer link );","prefix":"llGetLinkNumberOfSides","body":["llGetLinkNumberOfSides(${0})"]}},{"llGetLinkPrimitiveParams":{"description":"These functions are very similar; the difference is the latter takes a link parameter, and does not cause the script to sleep.\niveParams","prefix":"llGetLinkPrimitiveParams","body":["llGetLinkPrimitiveParams(${0})"]}},{"llGetListEntryType":{"description":"Returns the type (an integer) of the entry at index in src.\ninteger llGetListEntryType( list src, integer index );","prefix":"llGetListEntryType","body":["llGetListEntryType(${0})"]}},{"llGetListLength":{"description":"Returns an integer that is the number of elements in the list src.\ninteger llGetListLength( list src );","prefix":"llGetListLength","body":["llGetListLength(${0})"]}},{"llGetLocalPos":{"description":"Returns a vector that is the position relative (local) to the root.\nvector llGetLocalPos(  );","prefix":"llGetLocalPos","body":["llGetLocalPos(${0})"]}},{"llGetLocalRot":{"description":"Returns the rotation of the prim relative to the root.\nrotation llGetLocalRot(  );","prefix":"llGetLocalRot","body":["llGetLocalRot(${0})"]}},{"llGetMass":{"description":"Returns a float that is the mass of object (in Lindograms) that script is attached to.\nfloat llGetMass(  );","prefix":"llGetMass","body":["llGetMass(${0})"]}},{"llGetMassMKS":{"description":"Returns a float that is the mass (in Kilograms) of object that script is attached to. Functionally identical to llGetMass except for the unit used in the return value.\nfloat llGetMassMKS(  );","prefix":"llGetMassMKS","body":["llGetMassMKS(${0})"]}},{"llGetMaxScaleFactor":{"description":"Returns a float that is the largest scaling factor that can be used with llScaleByFactor to resize the object.  This maximum is determined by the Linkability Rules and prim scale limits.\nfloat llGetMaxScaleFactor(  );","prefix":"llGetMaxScaleFactor","body":["llGetMaxScaleFactor(${0})"]}},{"llGetMemoryLimit":{"description":"Get the maximum memory a script can use.Returns the integer amount of memory the script can use in bytes.\ninteger llGetMemoryLimit(  );","prefix":"llGetMemoryLimit","body":["llGetMemoryLimit(${0})"]}},{"llGetMinScaleFactor":{"description":"Returns a float that is the smallest scaling factor that can be used with llScaleByFactor to resize the object.  This minimum is determined by the prim scale limits.\nfloat llGetMinScaleFactor(  );","prefix":"llGetMinScaleFactor","body":["llGetMinScaleFactor(${0})"]}},{"llGetNextEmail":{"description":"Get the next queued email that comes from address, with specified subject.\nllGetNextEmail( string address, string subject );","prefix":"llGetNextEmail","body":["llGetNextEmail(${0})"]}},{"llGetNotecardLine":{"description":"Requests the line line of the notecard name from the dataserver.Returns the handle (a key) for a dataserver event response.\nkey llGetNotecardLine( string name, integer line );","prefix":"llGetNotecardLine","body":["llGetNotecardLine(${0})"]}},{"llGetNumberOfNotecardLines":{"description":"Requests the number of lines in notecard name via the dataserver event (cast dataserver value to integer)Returns the handle (a key) for a dataserver event response.\nkey llGetNumberOfNotecardLines( string name );","prefix":"llGetNumberOfNotecardLines","body":["llGetNumberOfNotecardLines(${0})"]}},{"llGetNumberOfPrims":{"description":"Returns an integer that is the number of prims in a link set the script is attached to.\ninteger llGetNumberOfPrims(  );","prefix":"llGetNumberOfPrims","body":["llGetNumberOfPrims(${0})"]}},{"llGetNumberOfSides":{"description":"Returns an integer that is the number of faces (or sides) of the prim.\ninteger llGetNumberOfSides(  );","prefix":"llGetNumberOfSides","body":["llGetNumberOfSides(${0})"]}},{"llGetObjectDesc":{"description":"Returns a string containing the description of the prim the script is attached to.\nstring llGetObjectDesc(  );","prefix":"llGetObjectDesc","body":["llGetObjectDesc(${0})"]}},{"llGetObjectDetails":{"description":"Returns a list of the details for id, specifically those requested in params.\nlist llGetObjectDetails( key id, list params );","prefix":"llGetObjectDetails","body":["llGetObjectDetails(${0})"]}},{"llGetObjectMass":{"description":"Returns a float that is the mass of id\nfloat llGetObjectMass( key id );","prefix":"llGetObjectMass","body":["llGetObjectMass(${0})"]}},{"llGetObjectName":{"description":"Returns a string that is the name of the prim the script is attached to.\nstring llGetObjectName(  );","prefix":"llGetObjectName","body":["llGetObjectName(${0})"]}},{"llGetObjectPermMask":{"description":"Returns a bit field (an integer) of the requested permission category for the object containing this script.\ninteger llGetObjectPermMask( integer category );","prefix":"llGetObjectPermMask","body":["llGetObjectPermMask(${0})"]}},{"llGetObjectPrimCount":{"description":"Returns an integer that is the total number of prims in the object that contains prim.\ninteger llGetObjectPrimCount( key prim );","prefix":"llGetObjectPrimCount","body":["llGetObjectPrimCount(${0})"]}},{"llGetOmega":{"description":"Returns a vector that is the rotation velocity of the object in radians per second.\nvector llGetOmega(  );","prefix":"llGetOmega","body":["llGetOmega(${0})"]}},{"llGetOwner":{"description":"Returns a key that is the object owner's UUID.\nkey llGetOwner(  );","prefix":"llGetOwner","body":["llGetOwner(${0})"]}},{"llGetOwnerKey":{"description":"Returns a key that is the owner of prim id\nkey llGetOwnerKey( key id );","prefix":"llGetOwnerKey","body":["llGetOwnerKey(${0})"]}},{"llGetParcelDetails":{"description":"Returns a list that is the parcel details specified in params (in the same order) for the parcel at pos.\nlist llGetParcelDetails( vector pos, list params );","prefix":"llGetParcelDetails","body":["llGetParcelDetails(${0})"]}},{"llGetParcelFlags":{"description":"Returns a bit field (an integer) of parcel flags (PARCEL_FLAG_*) for the parcel that includes the point pos.\ninteger llGetParcelFlags( vector pos );","prefix":"llGetParcelFlags","body":["llGetParcelFlags(${0})"]}},{"llGetParcelMaxPrims":{"description":"Returns an integer that is the maximum combined land impact allowed for objects on the parcel at pos.\ninteger llGetParcelMaxPrims( vector pos, integer sim_wide );","prefix":"llGetParcelMaxPrims","body":["llGetParcelMaxPrims(${0})"]}},{"llGetParcelMusicURL":{"description":"Returns a string containing the parcel streaming audio URL.\nstring llGetParcelMusicURL(  );","prefix":"llGetParcelMusicURL","body":["llGetParcelMusicURL(${0})"]}},{"llGetParcelPrimCount":{"description":"Returns an integer that is the total land impact of objects on the parcel at pos of the given category\ninteger llGetParcelPrimCount( vector pos, integer category, integer sim_wide );","prefix":"llGetParcelPrimCount","body":["llGetParcelPrimCount(${0})"]}},{"llGetParcelPrimOwners":{"description":"Returns a list of all residents who own objects on the parcel at pos and with individual land impact used. The list is formatted as [ key agentKey1, integer agentImpact1, key agentKey2, integer agentImpact2, ... ], and sorted by agent key with a maximum of 100 strides.\nlist llGetParcelPrimOwners( vector pos );","prefix":"llGetParcelPrimOwners","body":["llGetParcelPrimOwners(${0})"]}},{"llGetPermissions":{"description":"Returns an integer bitfield with the script permissions granted\ninteger llGetPermissions(  );","prefix":"llGetPermissions","body":["llGetPermissions(${0})"]}},{"llGetPermissionsKey":{"description":"Returns the avatar (a key) of the avatar that last granted or declined permissions to the script.\nkey llGetPermissionsKey(  );","prefix":"llGetPermissionsKey","body":["llGetPermissionsKey(${0})"]}},{"llGetPhysicsMaterial":{"description":"Used to get the physical characteristics of an object.Returns a list in the form [\u00a0float\u00a0gravity_multiplier, float\u00a0restitution, float\u00a0friction, float\u00a0density\u00a0]\nlist llGetPhysicsMaterial(  );","prefix":"llGetPhysicsMaterial","body":["llGetPhysicsMaterial(${0})"]}},{"llGetPos":{"description":"Returns the vector position of the task in region coordinates\nvector llGetPos(  );","prefix":"llGetPos","body":["llGetPos(${0})"]}},{"llGetPrimitiveParams":{"description":"These functions are very similar; the difference is the latter takes a link parameter, and does not cause the script to sleep.\niveParams","prefix":"llGetPrimitiveParams","body":["llGetPrimitiveParams(${0})"]}},{"llGetPrimMediaParams":{"description":"Get the media params for a particular face on an object, given the desired list of names.Returns a parameter list (a list) of values in the order requested.\nlist llGetPrimMediaParams( integer face, list params );","prefix":"llGetPrimMediaParams","body":["llGetPrimMediaParams(${0})"]}},{"llGetRegionAgentCount":{"description":"Returns an integer that is the number of avatars in the region.\ninteger llGetRegionAgentCount(  );","prefix":"llGetRegionAgentCount","body":["llGetRegionAgentCount(${0})"]}},{"llGetRegionCorner":{"description":"Returns a vector in meters that is the global location of the south-west corner of the region the object is in. The z component is 0.0\nvector llGetRegionCorner(  );","prefix":"llGetRegionCorner","body":["llGetRegionCorner(${0})"]}},{"llGetRegionFlags":{"description":"Returns an integer that is the region flags (REGION_FLAG_*) for the region the object is in.\ninteger llGetRegionFlags(  );","prefix":"llGetRegionFlags","body":["llGetRegionFlags(${0})"]}},{"llGetRegionFPS":{"description":"Returns a float that is the mean region frames per second.\nfloat llGetRegionFPS(  );","prefix":"llGetRegionFPS","body":["llGetRegionFPS(${0})"]}},{"llGetRegionName":{"description":"Returns a string that is the current region name\nstring llGetRegionName(  );","prefix":"llGetRegionName","body":["llGetRegionName(${0})"]}},{"llGetRegionTimeDilation":{"description":"Returns a float that is the current time dilation, the value range is [0.0,\u00a01.0], 0.0 (full dilation) and 1.0 (no dilation).[1]\nfloat llGetRegionTimeDilation(  );","prefix":"llGetRegionTimeDilation","body":["llGetRegionTimeDilation(${0})"]}},{"llGetRootPosition":{"description":"Returns a vector that is the region position of the root object of the object script is attached to\nvector llGetRootPosition(  );","prefix":"llGetRootPosition","body":["llGetRootPosition(${0})"]}},{"llGetRootRotation":{"description":"Returns a rotation that is the region rotation of the root prim of the object.\nrotation llGetRootRotation(  );","prefix":"llGetRootRotation","body":["llGetRootRotation(${0})"]}},{"llGetRot":{"description":"Returns a rotation that is the prim's rotation relative to the region's axes.\nrotation llGetRot(  );","prefix":"llGetRot","body":["llGetRot(${0})"]}},{"llGetScale":{"description":"Returns a vector that is the scale of the prim.\nvector llGetScale(  );","prefix":"llGetScale","body":["llGetScale(${0})"]}},{"llGetScriptName":{"description":"Returns a string that is the name of the script that called this function.\nstring llGetScriptName(  );","prefix":"llGetScriptName","body":["llGetScriptName(${0})"]}},{"llGetScriptState":{"description":"Returns a boolean (an integer) that is TRUE if the script is running.\ninteger llGetScriptState( string script );","prefix":"llGetScriptState","body":["llGetScriptState(${0})"]}},{"llGetSimStats":{"description":"Returns a float that is the requested statistic.\nfloat llGetSimStats( integer stat_type );","prefix":"llGetSimStats","body":["llGetSimStats(${0})"]}},{"llGetSimulatorHostname":{"description":"Returns a string that is the hostname of the machine the script is running on (same as string in viewer Help dialog)\nstring llGetSimulatorHostname(  );","prefix":"llGetSimulatorHostname","body":["llGetSimulatorHostname(${0})"]}},{"llGetSPMaxMemory":{"description":"Returns the integer of the most bytes used while LlScriptProfiler was last active.\ninteger llGetSPMaxMemory(  );","prefix":"llGetSPMaxMemory","body":["llGetSPMaxMemory(${0})"]}},{"llGetStartParameter":{"description":"Returns an integer that is the script start/rez parameter.\ninteger llGetStartParameter(  );","prefix":"llGetStartParameter","body":["llGetStartParameter(${0})"]}},{"llGetStaticPath":{"description":"Returns a list of position vectors indicating pathfinding waypoints between positions at start and end, for a character of a given radius. The waypoints this function returns are for the 'static' nav mesh, meaning that\u00a0objects set to \"movable obstacle\" or \"movable phantom\" are ignored.\nlist llGetStaticPath( vector start, vector end, float radius, list params );","prefix":"llGetStaticPath","body":["llGetStaticPath(${0})"]}},{"llGetStatus":{"description":"Returns a boolean (an integer) equal to the status of the object.\ninteger llGetStatus( integer status );","prefix":"llGetStatus","body":["llGetStatus(${0})"]}},{"llGetSubString":{"description":"Returns a string that is the substring of src from start to end, leaving the original string intact.\nstring llGetSubString( string src, integer start, integer end );","prefix":"llGetSubString","body":["llGetSubString(${0})"]}},{"llGetSunDirection":{"description":"Returns a vector that is a normalized vector of the direction of the sun in the region.\nvector llGetSunDirection(  );","prefix":"llGetSunDirection","body":["llGetSunDirection(${0})"]}},{"llGetTexture":{"description":"Returns a string that is the texture on face\nstring llGetTexture( integer face );","prefix":"llGetTexture","body":["llGetTexture(${0})"]}},{"llGetTextureOffset":{"description":"Returns a vector that is the texture offset of face in the x (\"U\", horizontal) and y (\"V\", vertical) components. The z component is unused.\nvector llGetTextureOffset( integer face );","prefix":"llGetTextureOffset","body":["llGetTextureOffset(${0})"]}},{"llGetTextureRot":{"description":"Returns a float that is the texture rotation, expressed as an angle, on face\nfloat llGetTextureRot( integer face );","prefix":"llGetTextureRot","body":["llGetTextureRot(${0})"]}},{"llGetTextureScale":{"description":"Returns a vector that is the texture scale on face (only the x and y components are used).\nvector llGetTextureScale( integer face );","prefix":"llGetTextureScale","body":["llGetTextureScale(${0})"]}},{"llGetTime":{"description":"Returns a float that is script time in seconds with subsecond precision since the script started, was last reset, or call to either llResetTime or llGetAndResetTime.\nfloat llGetTime(  );","prefix":"llGetTime","body":["llGetTime(${0})"]}},{"llGetTimeOfDay":{"description":"Returns a float that is the time in seconds with subsecond precision since Second Life midnight or region up-time (time since when the region was brought online/rebooted); whichever is smaller. If the region is configured so the sun stays in a constant position, then the returned value is the region up-time.\nfloat llGetTimeOfDay(  );","prefix":"llGetTimeOfDay","body":["llGetTimeOfDay(${0})"]}},{"llGetTimestamp":{"description":"Returns a string that is the current date and time in the UTC time zone in the format \"YYYY-MM-DDThh:mm:ss.ff..fZ\"\nstring llGetTimestamp(  );","prefix":"llGetTimestamp","body":["llGetTimestamp(${0})"]}},{"llGetTorque":{"description":"Returns a vector that is the torque (if the script is physical)\nvector llGetTorque(  );","prefix":"llGetTorque","body":["llGetTorque(${0})"]}},{"llGetUnixTime":{"description":"Returns an integer that is the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock.\ninteger llGetUnixTime(  );","prefix":"llGetUnixTime","body":["llGetUnixTime(${0})"]}},{"llGetUsedMemory":{"description":"Returns the integer of the number of bytes of memory currently in use by the script.\ninteger llGetUsedMemory(  );","prefix":"llGetUsedMemory","body":["llGetUsedMemory(${0})"]}},{"llGetUsername":{"description":"Returns a string that is the unique username of the avatar specified by id.\nstring llGetUsername( key id );","prefix":"llGetUsername","body":["llGetUsername(${0})"]}},{"llGetVel":{"description":"Returns a vector that is the velocity of the object.\nvector llGetVel(  );","prefix":"llGetVel","body":["llGetVel(${0})"]}},{"llGetWallclock":{"description":"Returns a float that is the time in seconds since midnight Pacific time (PST/PDT), truncated to whole seconds. That is the same as the time of day in SLT expressed as seconds.\nfloat llGetWallclock(  );","prefix":"llGetWallclock","body":["llGetWallclock(${0})"]}},{"llGiveInventory":{"description":"Give inventory to destination.\nllGiveInventory( key destination, string inventory );","prefix":"llGiveInventory","body":["llGiveInventory(${0})"]}},{"llGiveInventoryList":{"description":"Gives inventory items to target, creating a new folder to put them in.\nllGiveInventoryList( key target, string folder, list inventory );","prefix":"llGiveInventoryList","body":["llGiveInventoryList(${0})"]}},{"llGiveMoney":{"description":"Transfer amount of L$ money from script owner to destination avatar.Returns an integer that is always zero. In contrast llTransferLindenDollars returns a key that can be used to match the function call to the resulting transaction_result event and the transaction history.\ninteger llGiveMoney( key destination, integer amount );","prefix":"llGiveMoney","body":["llGiveMoney(${0})"]}},{"llGodLikeRezObject":{"description":"Requires God Mode\n","prefix":"llGodLikeRezObject","body":["llGodLikeRezObject(${0})"]}},{"llGround":{"description":"Returns a float that is the ground height directly below the prim position + offset\nfloat llGround( vector offset );","prefix":"llGround","body":["llGround(${0})"]}},{"llGroundContour":{"description":"Returns a vector that is the ground contour direction below the prim position + offset. The contour is the direction of a contour line at that point, that is the direction in which there is no change in elevation.\nvector llGroundContour( vector offset );","prefix":"llGroundContour","body":["llGroundContour(${0})"]}},{"llGroundNormal":{"description":"Returns a vector that is the ground normal from the current position + offset.\nvector llGroundNormal( vector offset );","prefix":"llGroundNormal","body":["llGroundNormal(${0})"]}},{"llGroundRepel":{"description":"Critically damps to height if within height * 0.5 of ground or water level (which ever is higher)\nllGroundRepel( float height, integer water, float tau );","prefix":"llGroundRepel","body":["llGroundRepel(${0})"]}},{"llGroundSlope":{"description":"Returns a vector that is the ground slope below the object position + offset\nvector llGroundSlope( vector offset );","prefix":"llGroundSlope","body":["llGroundSlope(${0})"]}},{"llHTTPRequest":{"description":"Sends an HTTP request to the specified URL with the body of the request and parameters.Returns a handle (a key) identifying the HTTP request made.\nkey llHTTPRequest( string url, list parameters, string body );","prefix":"llHTTPRequest","body":["llHTTPRequest(${0})"]}},{"llHTTPResponse":{"description":"Responds to request_id with status and body.\nllHTTPResponse( key request_id, integer status, string body );","prefix":"llHTTPResponse","body":["llHTTPResponse(${0})"]}},{"llInsertString":{"description":"Returns the string dst with src inserted starting at pos.\nstring llInsertString( string dst, integer pos, string src );","prefix":"llInsertString","body":["llInsertString(${0})"]}},{"llInstantMessage":{"description":"Sends an Instant Message specified in the string message to the user specified by user.\nllInstantMessage( key user, string message );","prefix":"llInstantMessage","body":["llInstantMessage(${0})"]}},{"llIntegerToBase64":{"body":["llIntegerToBase64(${0})"],"description":"Returns a string that is a Base64 big endian encode of number\nstring llIntegerToBase64( integer number );","prefix":"llIntegerToBase64"}},{"llJson2List":{"body":["llJson2List(${0})"],"description":"This function takes a string representing JSON, and returns a list of the top level.Returns a list made by parsing src, a string representing json.\nlist llJson2List( string src );","prefix":"llJson2List"}},{"llJsonGetValue":{"body":["llJsonGetValue(${0})"],"description":"Gets the value indicated by specifiers from the json string.Returns a string made by parsing json, a string representing json and traversing as specified by specifiers.\nstring llJsonGetValue( string json, list specifiers );","prefix":"llJsonGetValue"}},{"llJsonSetValue":{"body":["llJsonSetValue(${0})"],"description":"Returns, if successful, a new JSON text string which is json with the value indicated by the specifiers list set to value.\nstring llJsonSetValue( string json, list specifiers, string value );","prefix":"llJsonSetValue"}},{"llJsonValueType":{"body":["llJsonValueType(${0})"],"description":"Gets the JSON type for the value in json at the location specifiers.Returns the string specifying the type of the value at specifiers in json.\nstring llJsonValueType( string json, list specifiers );","prefix":"llJsonValueType"}},{"llKey2Name":{"body":["llKey2Name(${0})"],"description":"Returns a string that is the legacy name of the prim or avatar specified by id.\nstring llKey2Name( key id );","prefix":"llKey2Name"}},{"llKeyCountKeyValue":{"body":["llKeyCountKeyValue(${0})"],"description":"Start an asynchronous transaction to request the number of keys with the script's Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\nkey llKeyCountKeyValue(  );","prefix":"llKeyCountKeyValue"}},{"llKeysKeyValue":{"body":["llKeysKeyValue(${0})"],"description":"Start an asynchronous transaction to request a number of keys from the script's Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed.\nkey llKeysKeyValue( integer first, integer count );","prefix":"llKeysKeyValue"}},{"llLinkParticleSystem":{"body":["llLinkParticleSystem(${0})"],"description":"These functions are almost entirely identical.\nystem","prefix":"llLinkParticleSystem"}},{"llLinkSitTarget":{"body":["llLinkSitTarget(${0})"],"description":"Set the sit location for the linked prim(s). The sit location is relative to the prim's position and rotation.\nllLinkSitTarget( integer link, vector offset, rotation rot );","prefix":"llLinkSitTarget"}},{"llList2CSV":{"body":["llList2CSV(${0})"],"description":"Returns a string of comma separated values taken in order from src.\nstring llList2CSV( list src );","prefix":"llList2CSV"}},{"llList2Float":{"body":["llList2Float(${0})"],"description":"Returns a float that is at index in src.\nfloat llList2Float( list src, integer index );","prefix":"llList2Float"}},{"llList2Integer":{"body":["llList2Integer(${0})"],"description":"Returns an integer that is at index in src.\ninteger llList2Integer( list src, integer index );","prefix":"llList2Integer"}},{"llList2Json":{"body":["llList2Json(${0})"],"description":"This function takes a list and returns a JSON string of that list as either a json object or json array.Returns a string that is either values serialized as a JSON type, or if an error was encountered JSON_INVALID.\nstring llList2Json( string type, list values );","prefix":"llList2Json"}},{"llList2Key":{"body":["llList2Key(${0})"],"description":"Returns a key that is at index in src.\nkey llList2Key( list src, integer index );","prefix":"llList2Key"}},{"llList2List":{"body":["llList2List(${0})"],"description":"Returns a list that is a slice of src from start to end.\nlist llList2List( list src, integer start, integer end );","prefix":"llList2List"}},{"llList2ListStrided":{"body":["llList2ListStrided(${0})"],"description":"Returns a list of all the entries in the strided list whose index is a multiple of stride in the range start to end.\nlist llList2ListStrided( list src, integer start, integer end, integer stride );","prefix":"llList2ListStrided"}},{"llList2Rot":{"body":["llList2Rot(${0})"],"description":"Returns a rotation that is at index in src.\nrotation llList2Rot( list src, integer index );","prefix":"llList2Rot"}},{"llList2String":{"body":["llList2String(${0})"],"description":"Returns a string that is at index in src.\nstring llList2String( list src, integer index );","prefix":"llList2String"}},{"llList2Vector":{"body":["llList2Vector(${0})"],"description":"Returns a vector that is at index in src.\nvector llList2Vector( list src, integer index );","prefix":"llList2Vector"}},{"llListen":{"body":["llListen(${0})"],"description":"Sets a handle for msg on channel from name and id.Returns a handle (an integer) that can be used to deactivate or remove the listen.\ninteger llListen( integer channel, string name, key id, string msg );","prefix":"llListen"}},{"llListenControl":{"body":["llListenControl(${0})"],"description":"Makes listen event callback handle active or inactive\nllListenControl( integer handle, integer active );","prefix":"llListenControl"}},{"llListenRemove":{"body":["llListenRemove(${0})"],"description":"Removes listen event callback handle\nllListenRemove( integer handle );","prefix":"llListenRemove"}},{"llListFindList":{"body":["llListFindList(${0})"],"description":"Returns the integer index of the first instance of test in src.\ninteger llListFindList( list src, list test );","prefix":"llListFindList"}},{"llListInsertList":{"body":["llListInsertList(${0})"],"description":"Returns a list that contains all the elements from dest but with the elements from src inserted at position start.\nlist llListInsertList( list dest, list src, integer start );","prefix":"llListInsertList"}},{"llListRandomize":{"body":["llListRandomize(${0})"],"description":"Returns a list which is a randomized permutation of src.\nlist llListRandomize( list src, integer stride );","prefix":"llListRandomize"}},{"llListReplaceList":{"body":["llListReplaceList(${0})"],"description":"Returns a list that is a copy of dest with start through end removed and src inserted at start.\nlist llListReplaceList( list dest, list src, integer start, integer end );","prefix":"llListReplaceList"}},{"llListSort":{"body":["llListSort(${0})"],"description":"Returns a list that is src sorted by stride.\nlist llListSort( list src, integer stride, integer ascending );","prefix":"llListSort"}},{"llListStatistics":{"body":["llListStatistics(${0})"],"description":"Returns a float that is the result of performing statistical aggregate function operation on src.\nfloat llListStatistics( integer operation, list src );","prefix":"llListStatistics"}},{"llLoadURL":{"body":["llLoadURL(${0})"],"description":"Shows dialog to avatar offering to load web page at url with message.If user clicks yes, launches the page in their web browser, starting the browser if required.\nllLoadURL( key avatar, string message, string url );","prefix":"llLoadURL"}},{"llLog":{"body":["llLog(${0})"],"description":"Returns a float that is the natural logarithm of val.If val <= 0 return 0.0 instead.\nfloat llLog( float val );","prefix":"llLog"}},{"llLog10":{"body":["llLog10(${0})"],"description":"Returns a float that is the base 10 logarithm of val.If val <= 0 return zero instead.\nfloat llLog10( float val );","prefix":"llLog10"}},{"llLookAt":{"body":["llLookAt(${0})"],"description":"Cause object to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon.\nllLookAt( vector target, float strength, float damping );","prefix":"llLookAt"}},{"llLoopSound":{"body":["llLoopSound(${0})"],"description":"Plays attached sound looping indefinitely at volume\nllLoopSound( string sound, float volume );","prefix":"llLoopSound"}},{"llLoopSoundMaster":{"body":["llLoopSoundMaster(${0})"],"description":"Plays attached sound looping at volume, declares it a sync master.\nllLoopSoundMaster( string sound, float volume );","prefix":"llLoopSoundMaster"}},{"llLoopSoundSlave":{"body":["llLoopSoundSlave(${0})"],"description":"Plays attached sound looping at volume, synced to most audible sync master declared by llLoopSoundMaster.\nllLoopSoundSlave( string sound, float volume );","prefix":"llLoopSoundSlave"}},{"llManageEstateAccess":{"body":["llManageEstateAccess(${0})"],"description":"Use to add or remove agents from the estate's agent access or ban lists or groups from the estate's group access list.Returns a boolean (an integer) TRUE if the call was successful; FALSE if throttled, invalid action, invalid or null id or object owner is not allowed to manage the estate.\ninteger llManageEstateAccess( integer action, key avatar );","prefix":"llManageEstateAccess"}},{"llMapDestination":{"body":["llMapDestination(${0})"],"description":"Opens world map centered on simname with pos highlighted.Only works for scripts attached to avatar, or during touch events.\nllMapDestination( string simname, vector pos, vector look_at );","prefix":"llMapDestination"}},{"llMD5String":{"body":["llMD5String(${0})"],"description":"Returns a string of 32 hex characters that is the MD5 checksum of src with a salt of \":\"+nonce.\nstring llMD5String( string src, integer nonce );","prefix":"llMD5String"}},{"llMessageLinked":{"body":["llMessageLinked(${0})"],"description":"The purpose of this function is to allow scripts in the same object to communicate. It triggers a link_message event with the same parameters num, str, and id in all scripts in the prim(s) described by link.\nllMessageLinked( integer link, integer num, string str, key id );","prefix":"llMessageLinked"}},{"llMinEventDelay":{"body":["llMinEventDelay(${0})"],"description":"Set the minimum time between events being handled.\nllMinEventDelay( float delay );","prefix":"llMinEventDelay"}},{"llModifyLand":{"body":["llModifyLand(${0})"],"description":"Modify land with action on brush\nllModifyLand( integer action, integer brush );","prefix":"llModifyLand"}},{"llModPow":{"body":["llModPow(${0})"],"description":"Returns an integer that is a raised to the b power, mod c. ( (a**b)%c )\ninteger llModPow( integer a, integer b, integer c );","prefix":"llModPow"}},{"llMoveToTarget":{"body":["llMoveToTarget(${0})"],"description":"Critically damp to target in tau seconds (if the script is physical)\nllMoveToTarget( vector target, float tau );","prefix":"llMoveToTarget"}},{"llNavigateTo":{"body":["llNavigateTo(${0})"],"description":"Directs an object to travel to a defined position in the region or adjacent regions.\nllNavigateTo( vector pos, list options );","prefix":"llNavigateTo"}},{"llOffsetTexture":{"body":["llOffsetTexture(${0})"],"description":"Sets the texture u & v offsets for the chosen face.\nllOffsetTexture( float u, float v, integer face );","prefix":"llOffsetTexture"}},{"llOpenRemoteDataChannel":{"body":["llOpenRemoteDataChannel(${0})"],"description":"Creates a channel to listen for XML-RPC calls. Will trigger a remote_data event with channel id once it is available.\nllOpenRemoteDataChannel(  );","prefix":"llOpenRemoteDataChannel"}},{"llOverMyLand":{"body":["llOverMyLand(${0})"],"description":"Returns an integer boolean, TRUE if id is over land owned by the script owner, FALSE otherwise.\ninteger llOverMyLand( key id );","prefix":"llOverMyLand"}},{"llOwnerSay":{"body":["llOwnerSay(${0})"],"description":"Says msg to the object's owner only, if the owner is currently in the same region.\nllOwnerSay( string msg );","prefix":"llOwnerSay"}},{"llParcelMediaCommandList":{"body":["llParcelMediaCommandList(${0})"],"description":"Controls the playback of movies and other multimedia resources on a parcel or for an agent.\nllParcelMediaCommandList( list commandList );","prefix":"llParcelMediaCommandList"}},{"llParcelMediaQuery":{"body":["llParcelMediaQuery(${0})"],"description":"Returns a list containing results of query. The results are in the same order as the request.\nlist llParcelMediaQuery( list query );","prefix":"llParcelMediaQuery"}},{"llParseString2List":{"body":["llParseString2List(${0})"],"description":"Returns a list that is src broken into a list of strings, discarding separators, keeping spacers, discards any null (empty string) values generated.\nlist llParseString2List( string src, list separators, list spacers );","prefix":"llParseString2List"}},{"llParseStringKeepNulls":{"body":["llParseStringKeepNulls(${0})"],"description":"Returns a list that is src broken into a list, discarding separators, keeping spacers, keeping any null values generated.\nlist llParseStringKeepNulls( string src, list separators, list spacers );","prefix":"llParseStringKeepNulls"}},{"llParticleSystem":{"body":["llParticleSystem(${0})"],"description":"These functions are almost entirely identical.\nystem","prefix":"llParticleSystem"}},{"llPassCollisions":{"body":["llPassCollisions(${0})"],"description":"Sets the pass-collisions prim attribute.\nllPassCollisions( integer pass );","prefix":"llPassCollisions"}},{"llPassTouches":{"body":["llPassTouches(${0})"],"description":"Sets the pass-touches prim attribute.\nllPassTouches( integer pass );","prefix":"llPassTouches"}},{"llPatrolPoints":{"body":["llPatrolPoints(${0})"],"description":"Sets the object patrolling between the points specified in patrolPoints.\nllPatrolPoints( list patrolPoints, list options );","prefix":"llPatrolPoints"}},{"llPlaySound":{"body":["llPlaySound(${0})"],"description":"Plays attached sound once at volume\nllPlaySound( string sound, float volume );","prefix":"llPlaySound"}},{"llPlaySoundSlave":{"body":["llPlaySoundSlave(${0})"],"description":"Plays attached sound once at volume, synced to next loop of most audible sync master declared by llLoopSoundMaster.\nllPlaySoundSlave( string sound, float volume );","prefix":"llPlaySoundSlave"}},{"llPow":{"body":["llPow(${0})"],"description":"Returns a float that is base raised to the power exponent (baseexponent)\nfloat llPow( float base, float exponent );","prefix":"llPow"}},{"llPreloadSound":{"body":["llPreloadSound(${0})"],"description":"Preloads sound on viewers within range\nllPreloadSound( string sound );","prefix":"llPreloadSound"}},{"llPursue":{"body":["llPursue(${0})"],"description":"Causes the object to pursue target.\nllPursue( key target, list options );","prefix":"llPursue"}},{"llPushObject":{"body":["llPushObject(${0})"],"description":"Applies impulse and ang_impulse to object target\nllPushObject( key target, vector impulse, vector ang_impulse, integer local );","prefix":"llPushObject"}},{"llReadKeyValue":{"body":["llReadKeyValue(${0})"],"description":"Start an asynchronous transaction to read the value associated with the specified key (k) and the script's Experience.Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\nkey llReadKeyValue( string k );","prefix":"llReadKeyValue"}},{"llRegionSay":{"body":["llRegionSay(${0})"],"description":"Says the string msg on channel number channel that can be heard anywhere in the region by a script listening on channel.\nllRegionSay( integer channel, string msg );","prefix":"llRegionSay"}},{"llRegionSayTo":{"body":["llRegionSayTo(${0})"],"description":"Says the text supplied in string msg on channel supplied in integer channel to the object or avatar specified by target\nllRegionSayTo( key target, integer channel, string msg );","prefix":"llRegionSayTo"}},{"llReleaseControls":{"body":["llReleaseControls(${0})"],"description":"Stop taking inputs (that were taken with llTakeControls), dequeues any remaining control events. If PERMISSION_TAKE_CONTROLS was previously granted, it will be revoked.\nllReleaseControls(  );","prefix":"llReleaseControls"}},{"llReleaseURL":{"body":["llReleaseURL(${0})"],"description":"Releases the specified URL, it will no longer be usable.\nllReleaseURL( string url );","prefix":"llReleaseURL"}},{"llRemoteDataReply":{"body":["llRemoteDataReply(${0})"],"description":"Send an XML-RPC reply on channel to message_id with payload of string sdata and integer idata\nllRemoteDataReply( key channel, key message_id, string sdata, integer idata );","prefix":"llRemoteDataReply"}},{"llRemoteLoadScriptPin":{"body":["llRemoteLoadScriptPin(${0})"],"description":"Copy script name into target and set to running with a start_param only if target's pin matches pin\nllRemoteLoadScriptPin( key target, string name, integer pin, integer running, integer start_param );","prefix":"llRemoteLoadScriptPin"}},{"llRemoveFromLandBanList":{"body":["llRemoveFromLandBanList(${0})"],"description":"Remove avatar from the land ban list\nllRemoveFromLandBanList( key avatar );","prefix":"llRemoveFromLandBanList"}},{"llRemoveFromLandPassList":{"body":["llRemoveFromLandPassList(${0})"],"description":"Remove avatar from the land pass list.\nllRemoveFromLandPassList( key avatar );","prefix":"llRemoveFromLandPassList"}},{"llRemoveInventory":{"body":["llRemoveInventory(${0})"],"description":"Remove the named inventory item\nllRemoveInventory( string item );","prefix":"llRemoveInventory"}},{"llRemoveVehicleFlags":{"body":["llRemoveVehicleFlags(${0})"],"description":"Disable the specified vehicle flags\nllRemoveVehicleFlags( integer flags );","prefix":"llRemoveVehicleFlags"}},{"llRequestAgentData":{"body":["llRequestAgentData(${0})"],"description":"Requests data about agent id. When data is available the dataserver event will be raisedReturns the handle (a key) for the dataserver event when it is raised.\nkey llRequestAgentData( key id, integer data );","prefix":"llRequestAgentData"}},{"llRequestDisplayName":{"body":["llRequestDisplayName(${0})"],"description":"Requests the Display Name of the agent identified by id. When the Display Name is available the dataserver event will be raised. The agent identified by id does not need to be in the same region or online at the time of the request.Returns the handle (a key) that is used to identify the dataserver event when it is raised.\nkey llRequestDisplayName( key id );","prefix":"llRequestDisplayName"}},{"llRequestExperiencePermissions":{"body":["llRequestExperiencePermissions(${0})"],"description":"Asks the agent for permission to participate in the script's Experience.\nllRequestExperiencePermissions( key agent, string name );","prefix":"llRequestExperiencePermissions"}},{"llRequestInventoryData":{"body":["llRequestInventoryData(${0})"],"description":"Requests data about the item name in the prim's inventory. When data is available the dataserver event will be raised.Returns the handle (a key) that is used to identify the dataserver event when it is raised.\nkey llRequestInventoryData( string name );","prefix":"llRequestInventoryData"}},{"llRequestPermissions":{"body":["llRequestPermissions(${0})"],"description":"Ask agent for permissions to run certain classes of functions.\nllRequestPermissions( key agent, integer permissions );","prefix":"llRequestPermissions"}},{"llRequestSecureURL":{"body":["llRequestSecureURL(${0})"],"description":"Requests one HTTPS:// (SSL) url for use by this object. The http_request event is tiggered with result of the request. HTTPS-in uses port 12043.Returns a handle (a key) used for identifying the result of the request in the http_request event.\nkey llRequestSecureURL(  );","prefix":"llRequestSecureURL"}},{"llRequestSimulatorData":{"body":["llRequestSimulatorData(${0})"],"description":"Requests data about region. When data is available the dataserver event will be raised.Returns a handle (a key) for a dataserver event response.\nkey llRequestSimulatorData( string region, integer data );","prefix":"llRequestSimulatorData"}},{"llRequestURL":{"body":["llRequestURL(${0})"],"description":"Requests one HTTP:// url for use by this script. The http_request event is triggered with the result of the request. HTTP-in uses port 12046.Returns a handle (a key) used for identifying the result of the request in the http_request event.\nkey llRequestURL(  );","prefix":"llRequestURL"}},{"llRequestUsername":{"body":["llRequestUsername(${0})"],"description":"Requests the Username of the agent identified by id. When the Username is available the dataserver event will be raised. The agent identified by id does not need to be in the same region or online at the time of the request.Returns a handle (a key) that is used to identify the dataserver event when it is raised.\nkey llRequestUsername( key id );","prefix":"llRequestUsername"}},{"llResetAnimationOverride":{"body":["llResetAnimationOverride(${0})"],"description":"If id is not the UUID of an avatar, the dataserver event is not raised.\nllResetAnimationOverride( string anim_state );","prefix":"llResetAnimationOverride"}},{"llResetLandBanList":{"body":["llResetLandBanList(${0})"],"description":"Resets the animation override of the specified animation state (anim_state) to the corresponding default value.\nllResetLandBanList(  );","prefix":"llResetLandBanList"}},{"llResetLandPassList":{"body":["llResetLandPassList(${0})"],"description":"Removes all residents from the land ban list.\nllResetLandPassList(  );","prefix":"llResetLandPassList"}},{"llResetOtherScript":{"body":["llResetOtherScript(${0})"],"description":"Removes all residents from the land access/pass list.\nllResetOtherScript( string name );","prefix":"llResetOtherScript"}},{"llResetScript":{"body":["llResetScript(${0})"],"description":"Resets script name.\nllResetScript(  );","prefix":"llResetScript"}},{"llResetTime":{"body":["llResetTime(${0})"],"description":"Resets the script.\nllResetTime(  );","prefix":"llResetTime"}},{"llReturnObjectsByID":{"body":["llReturnObjectsByID(${0})"],"description":"Resets the script-time timer to zero.\ninteger llReturnObjectsByID( list objects );","prefix":"llReturnObjectsByID"}},{"llReturnObjectsByOwner":{"body":["llReturnObjectsByOwner(${0})"],"description":"If the script is owned by an agent, PERMISSION_RETURN_OBJECTS may be granted by the owner.  If the script is owned by a group, this permission may be granted by an agent belonging to the group's \"Owners\" role.Returns an integer that is the number of objects successfully returned to their owners or an ERR_* flag.\ninteger llReturnObjectsByOwner( key owner, integer scope );","prefix":"llReturnObjectsByOwner"}},{"llRezAtRoot":{"body":["llRezAtRoot(${0})"],"description":"If the script is owned by an agent, PERMISSION_RETURN_OBJECTS may be granted by the owner.  If the script is owned by a group, this permission may be granted by an agent belonging to the group's \"Owners\" role.Returns an integer that is the number of objects successfully returned to their owners or an ERR_* flag.\nllRezAtRoot( string inventory, vector position, vector velocity, rotation rot, integer param );","prefix":"llRezAtRoot"}},{"llRezObject":{"body":["llRezObject(${0})"],"description":"Instantiate inventory object rotated to rot with its root at position, moving at velocity, using param as the start parameter\nllRezObject( string inventory, vector pos, vector vel, rotation rot, integer param );","prefix":"llRezObject"}},{"llRot2Angle":{"body":["llRot2Angle(${0})"],"description":"Instantiate inventory object at pos with velocity vel and rotation rot with start parameter param\nfloat llRot2Angle( rotation rot );","prefix":"llRot2Angle"}},{"llRot2Axis":{"body":["llRot2Axis(${0})"],"description":"Returns a float that is the rotation angle represented by rot\nvector llRot2Axis( rotation rot );","prefix":"llRot2Axis"}},{"llRot2Euler":{"body":["llRot2Euler(${0})"],"description":"Returns a vector the rotation axis represented by rot\nvector llRot2Euler( rotation quat );","prefix":"llRot2Euler"}},{"llRot2Fwd":{"body":["llRot2Fwd(${0})"],"description":"Returns a vector that is the Euler representation (roll, pitch, yaw) of quat, with each component expressed in radians.\nvector llRot2Fwd( rotation q );","prefix":"llRot2Fwd"}},{"llRot2Left":{"body":["llRot2Left(${0})"],"description":"Computes the orientation of the local x-axis relative to the parent (i.e. the root prim or the world).Returns a vector that is the forward vector defined by q, i.e. a unit vector pointing in the local positive X direction.\nvector llRot2Left( rotation q );","prefix":"llRot2Left"}},{"llRot2Up":{"body":["llRot2Up(${0})"],"description":"Computes the orientation of the local y-axis relative to the parent (i.e. relative to the root prim or the world).Returns a vector that is the left vector defined by q, i.e. a unit vector pointing in the local positive Y direction\nvector llRot2Up( rotation q );","prefix":"llRot2Up"}},{"llRotateTexture":{"body":["llRotateTexture(${0})"],"description":"Computes the orientation of the local z-axis relative to the parent (i.e. the root prim or the world).Returns a vector that is the up vector defined by q, i.e. a unit vector pointing in the positive Z direction\nllRotateTexture( float angle, integer face );","prefix":"llRotateTexture"}},{"llRotBetween":{"prefix":"llRotBetween","body":["llRotBetween(${0})"],"description":"Returns a rotation that is the shortest rotation between the direction start and the direction end\nrotation llRotBetween( vector start, vector end );"}},{"llRotLookAt":{"prefix":"llRotLookAt","body":["llRotLookAt(${0})"],"description":"Causes an object to smoothly rotate to target_direction with strength resistance at damping force.\nllRotLookAt( rotation target_direction, float strength, float damping );"}},{"llRotTarget":{"prefix":"llRotTarget","body":["llRotTarget(${0})"],"description":"This function is to have the script know when it has reached a rotation.It registers a rot with a error that triggers at_rot_target and not_at_rot_target events continuously until unregistered.Returns a handle (an integer) to unregister the target with llRotTargetRemove\ninteger llRotTarget( rotation rot, float error );"}},{"llRotTargetRemove":{"prefix":"llRotTargetRemove","body":["llRotTargetRemove(${0})"],"description":"Removes rotational target handle registered with llRotTarget\nllRotTargetRemove( integer handle );"}},{"llRound":{"prefix":"llRound","body":["llRound(${0})"],"description":"Returns the integer that val is closest to.\ninteger llRound( float val );"}},{"llSameGroup":{"prefix":"llSameGroup","body":["llSameGroup(${0})"],"description":"Returns a boolean (an integer) that is TRUE if uuid and the prim the script is in are of the same group, otherwise FALSE.\ninteger llSameGroup( key uuid );"}},{"llSay":{"prefix":"llSay","body":["llSay(${0})"],"description":"Says the text supplied in string msg on channel supplied in integer channel.\nllSay( integer channel, string msg );"}},{"llScaleByFactor":{"prefix":"llScaleByFactor","body":["llScaleByFactor(${0})"],"description":"Attempts to resize the entire object by scaling_factor, maintaining the size-position ratios of the prims.\ninteger llScaleByFactor( float scaling_factor );"}},{"llScaleTexture":{"prefix":"llScaleTexture","body":["llScaleTexture(${0})"],"description":"Sets the texture u & v scales for the chosen face.\nllScaleTexture( float u, float v, integer face );"}},{"llScriptDanger":{"prefix":"llScriptDanger","body":["llScriptDanger(${0})"],"description":"Returns a boolean (an integer) that is TRUE if pos is over public land, sandbox land, land that doesn't allow everyone to edit and build, or land that doesn't allow outside scripts.\ninteger llScriptDanger( vector pos );"}},{"llScriptProfiler":{"prefix":"llScriptProfiler","body":["llScriptProfiler(${0})"],"description":"Enables or disables the scripts profiling state.\nllScriptProfiler( integer flags );"}},{"llSendRemoteData":{"prefix":"llSendRemoteData","body":["llSendRemoteData(${0})"],"description":"Send an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.Returns a key that is the message_id for the resulting remote_data events.\nkey llSendRemoteData( key channel, string dest, integer idata, string sdata );"}},{"llSensor":{"prefix":"llSensor","body":["llSensor(${0})"],"description":"Performs a single scan for name and id with type within radius meters and arc radians of forward vector\nllSensor( string name, key id, integer type, float radius, float arc );"}},{"llSensorRemove":{"prefix":"llSensorRemove","body":["llSensorRemove(${0})"],"description":"Removes the sensor setup by llSensorRepeat.\nllSensorRemove(  );"}},{"llSensorRepeat":{"prefix":"llSensorRepeat","body":["llSensorRepeat(${0})"],"description":"Performs a single scan for name and id with type within range meters and arc radians of forward vector and repeats every rate seconds. It does not perform the first scan until rate seconds have passed.\nllSensorRepeat( string name, key id, integer type, float range, float arc, float rate );"}},{"llSetAlpha":{"prefix":"llSetAlpha","body":["llSetAlpha(${0})"],"description":"Sets the alpha on face\nllSetAlpha( float alpha, integer face );"}},{"llSetAngularVelocity":{"prefix":"llSetAngularVelocity","body":["llSetAngularVelocity(${0})"],"description":"Applies rotational velocity to object.\nllSetAngularVelocity( vector initial_omega, integer local );"}},{"llSetAnimationOverride":{"prefix":"llSetAnimationOverride","body":["llSetAnimationOverride(${0})"],"description":"It does the same job as llApplyRotationalImpulse but doesn't depend of the mass of object .\nllSetAnimationOverride( string anim_state, string anim );"}},{"llSetBuoyancy":{"prefix":"llSetBuoyancy","body":["llSetBuoyancy(${0})"],"description":"Set the animation (anim) that will play for the given animation state (anim_state).\nllSetBuoyancy( float buoyancy );"}},{"llSetCameraAtOffset":{"prefix":"llSetCameraAtOffset","body":["llSetCameraAtOffset(${0})"],"description":"Sets the buoyancy of the task or object. Requires physics to be enabled.\nllSetCameraAtOffset( vector offset );"}},{"llSetCameraEyeOffset":{"prefix":"llSetCameraEyeOffset","body":["llSetCameraEyeOffset(${0})"],"description":"Sets the point the camera is looking at to offset for avatars that sit on the object.\nllSetCameraEyeOffset( vector offset );"}},{"llSetCameraParams":{"prefix":"llSetCameraParams","body":["llSetCameraParams(${0})"],"description":"Sets the camera eye offset for avatars that sit on the object.\nllSetCameraParams( list rules );"}},{"llSetClickAction":{"prefix":"llSetClickAction","body":["llSetClickAction(${0})"],"description":"Sets multiple camera parameters at once.\nllSetClickAction( integer action );"}},{"llSetColor":{"prefix":"llSetColor","body":["llSetColor(${0})"],"description":"Sets the action performed when a prim is clicked upon (aka click action).\nllSetColor( vector color, integer face );"}},{"llSetContentType":{"prefix":"llSetContentType","body":["llSetContentType(${0})"],"description":"Sets the color on face of the prim.\nllSetContentType( key request_id, integer content_type );"}},{"llSetDamage":{"prefix":"llSetDamage","body":["llSetDamage(${0})"],"description":"Sets the Internet media type \"Content-Type\" header of any subsequent LSL HTTP server response via llHTTPResponse.\nllSetDamage( float damage );"}},{"llSetForce":{"prefix":"llSetForce","body":["llSetForce(${0})"],"description":"Sets the amount of damage that will be done when this object hits an avatar.\nllSetForce( vector force, integer local );"}},{"llSetForceAndTorque":{"prefix":"llSetForceAndTorque","body":["llSetForceAndTorque(${0})"],"description":"Applies force to the object (if the script is physical)\nllSetForceAndTorque( vector force, vector torque, integer local );"}},{"llSetHoverHeight":{"prefix":"llSetHoverHeight","body":["llSetHoverHeight(${0})"],"description":"Sets the force and torque of object (if the script is physical)\nllSetHoverHeight( float height, integer water, float tau );"}},{"llSetInventoryPermMask":{"prefix":"llSetInventoryPermMask","body":["llSetInventoryPermMask(${0})"],"description":"Critically damps to a height above the ground (or water) in tau seconds.\n"}},{"llSetKeyframedMotion":{"prefix":"llSetKeyframedMotion","body":["llSetKeyframedMotion(${0})"],"description":"Requires God Mode\nllSetKeyframedMotion( list keyframes, list options );"}},{"llSetLinkAlpha":{"prefix":"llSetLinkAlpha","body":["llSetLinkAlpha(${0})"],"description":"Specify a list of times, positions, and orientations to be followed by an object. The object will be smoothly moved between keyframes by the simulator. Collisions with other nonphysical or keyframed objects will be ignored (no script events will fire and collision processing will not occur). Collisions with physical objects will be computed and reported, but the keyframed object will be unaffected by those collisions. (The physical object will be affected, however.)\nllSetLinkAlpha( integer link, float alpha, integer face );"}},{"llSetLinkCamera":{"prefix":"llSetLinkCamera","body":["llSetLinkCamera(${0})"],"description":"If a prim exists in the link set at link, set alpha on face of that prim.\nllSetLinkCamera( integer link, vector eye, vector at );"}},{"llSetLinkColor":{"prefix":"llSetLinkColor","body":["llSetLinkColor(${0})"],"description":"Sets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim.\nllSetLinkColor( integer link, vector color, integer face );"}},{"llSetLinkMedia":{"prefix":"llSetLinkMedia","body":["llSetLinkMedia(${0})"],"description":"If a prim exists in the link set at link, set color on face of that prim.\ninteger llSetLinkMedia( integer link, integer face, list params );"}},{"llSetLinkPrimitiveParams":{"prefix":"llSetLinkPrimitiveParams","body":["llSetLinkPrimitiveParams(${0})"],"description":"Set the media params for a particular face on the linked prim(s) without a delay.Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation(s).\n"}},{"llSetLinkPrimitiveParamsFast":{"prefix":"llSetLinkPrimitiveParamsFast","body":["llSetLinkPrimitiveParamsFast(${0})"],"description":"These functions are almost entirely identical. For almost all situations we recommend you use llSetLinkPrimitiveParamsFast.\n"}},{"llSetLinkTexture":{"prefix":"llSetLinkTexture","body":["llSetLinkTexture(${0})"],"description":"These functions are almost entirely identical. For almost all situations we recommend you use llSetLinkPrimitiveParamsFast.\nllSetLinkTexture( integer link, string texture, integer face );"}},{"llSetLinkTextureAnim":{"prefix":"llSetLinkTextureAnim","body":["llSetLinkTextureAnim(${0})"],"description":"If a prim exists in the link set at link, set texture on face of that prim.\nllSetLinkTextureAnim( integer link, integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate );"}},{"llSetLocalRot":{"prefix":"llSetLocalRot","body":["llSetLocalRot(${0})"],"description":"Animate the texture on the specified face/faces of the specified prim/prims by setting the texture scale and offset.  Identical to llSetTextureAnim except able to modify any prim in the link set.\nllSetLocalRot( rotation rot );"}},{"llSetMemoryLimit":{"prefix":"llSetMemoryLimit","body":["llSetMemoryLimit(${0})"],"description":"Sets the rotation of a child prim relative to the root prim\ninteger llSetMemoryLimit( integer limit );"}},{"llSetObjectDesc":{"prefix":"llSetObjectDesc","body":["llSetObjectDesc(${0})"],"description":"Request limit bytes to be reserved for this script.Returns the boolean (an integer) TRUE if the memory limit was successfully set (or FALSE if not).\nllSetObjectDesc( string description );"}},{"llSetObjectName":{"prefix":"llSetObjectName","body":["llSetObjectName(${0})"],"description":"Sets the prims description\nllSetObjectName( string name );"}},{"llSetObjectPermMask":{"prefix":"llSetObjectPermMask","body":["llSetObjectPermMask(${0})"],"description":"Sets the prim's name according to the name parameter.\n"}},{"llSetParcelMusicURL":{"prefix":"llSetParcelMusicURL","body":["llSetParcelMusicURL(${0})"],"description":"Requires God Mode\nllSetParcelMusicURL( string url );"}},{"llSetPayPrice":{"prefix":"llSetPayPrice","body":["llSetPayPrice(${0})"],"description":"Sets the streaming audio URL for the parcel object is on\nllSetPayPrice( integer price, list quick_pay_buttons );"}},{"llSetPhysicsMaterial":{"prefix":"llSetPhysicsMaterial","body":["llSetPhysicsMaterial(${0})"],"description":"Suggest default amounts for the pay text field and pay buttons of the appearing dialog when someone chooses to pay this object.\nllSetPhysicsMaterial( integer mask, float gravity_multiplier, float restitution, float friction, float density );"}},{"llSetPos":{"prefix":"llSetPos","body":["llSetPos(${0})"],"description":"Used to set the physical characteristics of an object.\nllSetPos( vector pos );"}},{"llSetPrimitiveParams":{"prefix":"llSetPrimitiveParams","body":["llSetPrimitiveParams(${0})"],"description":"Moves the object or primitive towards pos without using physics.\n"}},{"llSetPrimMediaParams":{"prefix":"llSetPrimMediaParams","body":["llSetPrimMediaParams(${0})"],"description":"These functions are almost entirely identical. For almost all situations we recommend you use llSetLinkPrimitiveParamsFast.\ninteger llSetPrimMediaParams( integer face, list params );"}},{"llSetRegionPos":{"prefix":"llSetRegionPos","body":["llSetRegionPos(${0})"],"description":"Set the media params for a particular face.Returns a status (an integer) that is a STATUS_* flag which details the success/failure of the operation(s).\ninteger llSetRegionPos( vector position );"}},{"llSetRemoteScriptAccessPin":{"prefix":"llSetRemoteScriptAccessPin","body":["llSetRemoteScriptAccessPin(${0})"],"description":"Tries to move the entire object so that the root prim is within 0.1m of position.Returns an integer boolean, TRUE if the object is successfully placed within 0.1 m of position, FALSE otherwise. See #Specification for details.\nllSetRemoteScriptAccessPin( integer pin );"}},{"llSetRot":{"prefix":"llSetRot","body":["llSetRot(${0})"],"description":"Allows a prim to have scripts remotely loaded via llRemoteLoadScriptPin when it is passes the correct pin and the prim is set mod.\nllSetRot( rotation rot );"}},{"llSetScale":{"prefix":"llSetScale","body":["llSetScale(${0})"],"description":"Sets the rotation of the prim to rot.\nllSetScale( vector size );"}},{"llSetScriptState":{"prefix":"llSetScriptState","body":["llSetScriptState(${0})"],"description":"Sets the size of the prim according to size\nllSetScriptState( string name, integer running );"}},{"llSetSitText":{"prefix":"llSetSitText","body":["llSetSitText(${0})"],"description":"Set the running state of the script name.\nllSetSitText( string text );"}},{"llSetSoundQueueing":{"prefix":"llSetSoundQueueing","body":["llSetSoundQueueing(${0})"],"description":"Displays text rather than the default \"Sit Here\" in the right-click menu.\nllSetSoundQueueing( integer queue );"}},{"llSetSoundRadius":{"prefix":"llSetSoundRadius","body":["llSetSoundRadius(${0})"],"description":"Set whether attached sounds wait for the current sound to finish. If queue is TRUE, queuing is enabled, if FALSE queuing is disabled. Sound queuing is disabled by default.\nllSetSoundRadius( float radius );"}},{"llSetStatus":{"prefix":"llSetStatus","body":["llSetStatus(${0})"],"description":"Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered).\nllSetStatus( integer status, integer value );"}},{"llSetText":{"prefix":"llSetText","body":["llSetText(${0})"],"description":"Sets the object status attributes indicated in the status} mask to value\nllSetText( string text, vector color, float alpha );"}},{"llSetTexture":{"prefix":"llSetTexture","body":["llSetTexture(${0})"],"description":"Displays text that hovers over the prim with specific color and translucency (specified with alpha).\nllSetTexture( string texture, integer face );"}},{"llSetTextureAnim":{"prefix":"llSetTextureAnim","body":["llSetTextureAnim(${0})"],"description":"Sets the texture of this prim's face.\nllSetTextureAnim( integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate );"}},{"llSetTimerEvent":{"prefix":"llSetTimerEvent","body":["llSetTimerEvent(${0})"],"description":"Animate the texture on the specified face/faces by setting the texture scale and offset.\nllSetTimerEvent( float sec );"}},{"llSetTorque":{"prefix":"llSetTorque","body":["llSetTorque(${0})"],"description":"Cause the timer event to be triggered a maximum of once every sec seconds. Passing in 0.0 stops further timer events.\nllSetTorque( vector torque, integer local );"}},{"llSetTouchText":{"prefix":"llSetTouchText","body":["llSetTouchText(${0})"],"description":"Sets the torque of object (if the script is physical)\nllSetTouchText( string text );"}},{"llSetVehicleFlags":{"prefix":"llSetVehicleFlags","body":["llSetVehicleFlags(${0})"],"description":"Displays text rather than the default \"Touch\" in the right-click menu\nllSetVehicleFlags( integer flags );"}},{"llSetVehicleFloatParam":{"prefix":"llSetVehicleFloatParam","body":["llSetVehicleFloatParam(${0})"],"description":"Enabled the specified vehicle flags\nllSetVehicleFloatParam( integer param, float value );"}},{"llSetVehicleRotationParam":{"prefix":"llSetVehicleRotationParam","body":["llSetVehicleRotationParam(${0})"],"description":"Sets the vehicle float parameter param to value.\nllSetVehicleRotationParam( integer param, rotation rot );"}},{"llSetVehicleType":{"prefix":"llSetVehicleType","body":["llSetVehicleType(${0})"],"description":"Sets the vehicle rotation parameter param to rot.\nllSetVehicleType( integer type );"}},{"llSetVehicleVectorParam":{"prefix":"llSetVehicleVectorParam","body":["llSetVehicleVectorParam(${0})"],"description":"Sets the vehicle type to one of the default types.\nllSetVehicleVectorParam( integer param, vector vec );"}},{"llSetVelocity":{"prefix":"llSetVelocity","body":["llSetVelocity(${0})"],"description":"Sets the vehicle vector parameter param to vec.\nllSetVelocity( vector force, integer local );"}},{"llSHA1String":{"prefix":"llSHA1String","body":["llSHA1String(${0})"],"description":"Applies velocity to object\nstring llSHA1String( string src );"}},{"llShout":{"prefix":"llShout","body":["llShout(${0})"],"description":"Returns a string of 40 hex characters that is the SHA-1 security hash of src.\nllShout( integer channel, string msg );"}},{"llSin":{"prefix":"llSin","body":["llSin(${0})"],"description":"Shouts the text supplied in string msg on channel supplied in integer channel.\nfloat llSin( float theta );"}},{"llSitOnLink":{"prefix":"llSitOnLink","body":["llSitOnLink(${0})"],"description":"Returns a float that is the sine of theta.\nInteger llSitOnLink( key agent_id, integer link );"}},{"llSitTarget":{"prefix":"llSitTarget","body":["llSitTarget(${0})"],"description":"The avatar specified by agent_id is forced to sit on the sit target of the prim indicated by the link parameter.  If the specified link is already occupied, the simulator searches down the chain of prims in the link set looking for an available sit target.Returns an Integer\nllSitTarget( vector offset, rotation rot );"}},{"llSleep":{"prefix":"llSleep","body":["llSleep(${0})"],"description":"Set the sit location for the prim. The sit location is relative to the prim's position and rotation.\nllSleep( float sec );"}},{"llStartAnimation":{"prefix":"llStartAnimation","body":["llStartAnimation(${0})"],"description":"Puts the script to sleep for sec seconds. The script will not do anything during this time.\nllStartAnimation( string anim );"}},{"llStopAnimation":{"prefix":"llStopAnimation","body":["llStopAnimation(${0})"],"description":"Start animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked.\nllStopAnimation( string anim );"}},{"llStopHover":{"prefix":"llStopHover","body":["llStopHover(${0})"],"description":"Stop animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked.\nllStopHover(  );"}},{"llStopLookAt":{"prefix":"llStopLookAt","body":["llStopLookAt(${0})"],"description":"Stop hovering to a height\nllStopLookAt(  );"}},{"llStopMoveToTarget":{"prefix":"llStopMoveToTarget","body":["llStopMoveToTarget(${0})"],"description":"Stop causing object to point at a target\nllStopMoveToTarget(  );"}},{"llStopSound":{"prefix":"llStopSound","body":["llStopSound(${0})"],"description":"Stops critically damped motion\nllStopSound(  );"}},{"llStringLength":{"prefix":"llStringLength","body":["llStringLength(${0})"],"description":"Stops the attached sound(s) currently playing, if they were started by llLoopSound\ninteger llStringLength( string str );"}},{"llStringToBase64":{"prefix":"llStringToBase64","body":["llStringToBase64(${0})"],"description":"Returns an integer that is the number of characters in str (not counting the null).\nstring llStringToBase64( string str );"}},{"llStringTrim":{"prefix":"llStringTrim","body":["llStringTrim(${0})"],"description":"Returns the string Base64 representation of the str interpreted as an UTF-8 byte sequence\nstring llStringTrim( string src, integer type );"}},{"llSubStringIndex":{"prefix":"llSubStringIndex","body":["llSubStringIndex(${0})"],"description":"Returns a string that is src with leading and/or trailing white space (spaces, tabs, and line feeds) trimmed from it.\ninteger llSubStringIndex( string source, string pattern );"}},{"llTakeControls":{"prefix":"llTakeControls","body":["llTakeControls(${0})"],"description":"Returns an integer that is the index of the first instance of pattern in source.\nllTakeControls( integer controls, integer accept, integer pass_on );"}},{"llTan":{"prefix":"llTan","body":["llTan(${0})"],"description":"Allows for intercepting of keyboard and mouse clicks, specifically those specified by controls, from the agent the script has permissions for.\nfloat llTan( float theta );"}},{"llTarget":{"prefix":"llTarget","body":["llTarget(${0})"],"description":"Returns a float that is the tangent of theta.\ninteger llTarget( vector position, float range );"}},{"llTargetOmega":{"prefix":"llTargetOmega","body":["llTargetOmega(${0})"],"description":"This function is to have the script know when it has reached a position.It registers a position with a range that triggers at_target and not_at_target events continuously until unregistered.Returns a handle (an integer) to unregister the target with llTargetRemove.\nllTargetOmega( vector axis, float spinrate, float gain );"}},{"llTargetRemove":{"prefix":"llTargetRemove","body":["llTargetRemove(${0})"],"description":"Rotates the object/prim around axis at a rate of spinrate * llVecMag(axis) in radians per second with strength gain.\nllTargetRemove( integer handle );"}},{"llTeleportAgent":{"prefix":"llTeleportAgent","body":["llTeleportAgent(${0})"],"description":"Removes positional target handle registered with llTarget\nllTeleportAgent( key avatar, string landmark, vector position, vector look_at );"}},{"llTeleportAgentGlobalCoords":{"prefix":"llTeleportAgentGlobalCoords","body":["llTeleportAgentGlobalCoords(${0})"],"description":"Requests a teleport of avatar to a landmark stored in the object's inventory.  If no landmark is provided (an empty string), the avatar is teleported to the location position in the current region. In either case, the avatar is turned to face the direction given by look_at.\nllTeleportAgentGlobalCoords( key agent, vector global_coordinates, vector region_coordinates, vector look_at );"}},{"llTeleportAgentHome":{"prefix":"llTeleportAgentHome","body":["llTeleportAgentHome(${0})"],"description":"Teleports an agent to set of a region_coordinates within a region at the specified global_coordinates.  The agent lands facing the direction defined by look_at.  A region's global coordinates can be retrieved using llRequestSimulatorData(region_name, DATA_SIM_POS)\nllTeleportAgentHome( key avatar );"}},{"llTextBox":{"prefix":"llTextBox","body":["llTextBox(${0})"],"description":"Teleports avatar on owner's land to their home location without any warning, similar to a God Summons or dying.\nllTextBox( key avatar, string message, integer channel );"}},{"llToLower":{"prefix":"llToLower","body":["llToLower(${0})"],"description":"Shows a dialog box on avatar's screen with the text message. It contains a text box for input, any text that is entered is said by avatar on channel when the \"Submit\" button is clicked.\nstring llToLower( string src );"}},{"llToUpper":{"prefix":"llToUpper","body":["llToUpper(${0})"],"description":"Returns a string that is src with all lower-case letters\nstring llToUpper( string src );"}},{"llTransferLindenDollars":{"prefix":"llTransferLindenDollars","body":["llTransferLindenDollars(${0})"],"description":"Returns a string that is src with all upper-case characters.\nkey llTransferLindenDollars( key destination, integer amount );"}},{"llTriggerSound":{"prefix":"llTriggerSound","body":["llTriggerSound(${0})"],"description":"Transfer amount of L$ money from script owner to destination avatar.Returns a key used in a matching transaction_result event for the success or failure of the transfer. If the transaction is successful, this key will show in the transaction history.\nllTriggerSound( string sound, float volume );"}},{"llTriggerSoundLimited":{"prefix":"llTriggerSoundLimited","body":["llTriggerSoundLimited(${0})"],"description":"Plays sound at volume, centered at but not attached to object.\nllTriggerSoundLimited( string sound, float volume, vector top_north_east, vector bottom_south_west );"}},{"llUnescapeURL":{"prefix":"llUnescapeURL","body":["llUnescapeURL(${0})"],"description":"Plays sound at volume, centered at but not attached to the object, limited to the box defined by vectors top_north_east and bottom_south_west\nstring llUnescapeURL( string url );"}},{"llUnSit":{"prefix":"llUnSit","body":["llUnSit(${0})"],"description":"Returns a string that is an unescaped/unencoded version of url, replacing \"%20\" with spaces etc.\nllUnSit( key id );"}},{"llUpdateCharacter":{"prefix":"llUpdateCharacter","body":["llUpdateCharacter(${0})"],"description":"The agent identified by id is forced to stand up if any of the following apply:\nllUpdateCharacter( list options );"}},{"llUpdateKeyValue":{"prefix":"llUpdateKeyValue","body":["llUpdateKeyValue(${0})"],"description":"Updates settings for a character\nkey llUpdateKeyValue( string k, string v, integer checked, string original_value );"}},{"llVecDist":{"prefix":"llVecDist","body":["llVecDist(${0})"],"description":"Start an asynchronous transaction to update a key-value pair associated with the script's Experience with the given key (k) and value (v).Returns a handle (a key) that can be used to identify the corresponding dataserver event to determine if this command succeeded or failed and the results.\nfloat llVecDist( vector vec_a, vector vec_b );"}},{"llVecMag":{"prefix":"llVecMag","body":["llVecMag(${0})"],"description":"Returns a float that is the undirected nonnegative distance between vec_a and vec_b.\nfloat llVecMag( vector vec );"}},{"llVecNorm":{"prefix":"llVecNorm","body":["llVecNorm(${0})"],"description":"Returns a float that is the magnitude of the vector (the undirected non-negative distance from vec to <0.0, 0.0, 0.0>).\nvector llVecNorm( vector vec );"}},{"llVolumeDetect":{"prefix":"llVolumeDetect","body":["llVolumeDetect(${0})"],"description":"Returns the vector that is vec normalized (a unit vector sharing the same direction as vec).\nllVolumeDetect( integer detect );"}},{"llWanderWithin":{"prefix":"llWanderWithin","body":["llWanderWithin(${0})"],"description":"If detect is TRUE, VolumeDetect is enabled, physical object and avatars can pass through the object.\nllWanderWithin( vector origin, vector dist, list options );"}},{"llWater":{"prefix":"llWater","body":["llWater(${0})"],"description":"Sets a character to wander about a central spot within a specified radius.\nfloat llWater( vector offset );"}},{"llWhisper":{"prefix":"llWhisper","body":["llWhisper(${0})"],"description":"Returns a float that is the water height below the prim's position + offset\nllWhisper( integer channel, string msg );"}},{"llWind":{"prefix":"llWind","body":["llWind(${0})"],"description":"Whispers the text supplied in string msg on channel supplied in integer channel.\nvector llWind( vector offset );"}},{"llXorBase64":{"prefix":"llXorBase64","body":["llXorBase64(${0})"],"description":"Returns a vector that is the wind velocity at the prim's position + offset\nstring llXorBase64( string str1, string str2 );"}},{"ACTIVE":{"body":["ACTIVE${0}"],"prefix":"ACTIVE","description":"integer ACTIVE = 0x2;"}},{"AGENT":{"body":["AGENT${0}"],"prefix":"AGENT","description":"integer AGENT = 0x1;"}},{"AGENT_ALWAYS_RUN":{"body":["AGENT_ALWAYS_RUN${0}"],"prefix":"AGENT_ALWAYS_RUN","description":"integer AGENT_ALWAYS_RUN = 0x1000;"}},{"AGENT_ATTACHMENTS":{"body":["AGENT_ATTACHMENTS${0}"],"prefix":"AGENT_ATTACHMENTS","description":"integer AGENT_ATTACHMENTS = 0x0002;"}},{"AGENT_AUTOPILOT":{"body":["AGENT_AUTOPILOT${0}"],"prefix":"AGENT_AUTOPILOT","description":"integer AGENT_AUTOPILOT = 0x2000;"}},{"AGENT_AWAY":{"body":["AGENT_AWAY${0}"],"prefix":"AGENT_AWAY","description":"integer AGENT_AWAY = 0x0040;"}},{"AGENT_BUSY":{"body":["AGENT_BUSY${0}"],"prefix":"AGENT_BUSY","description":"integer AGENT_BUSY = 0x0800;"}},{"AGENT_BY_LEGACY_NAME":{"body":["AGENT_BY_LEGACY_NAME${0}"],"prefix":"AGENT_BY_LEGACY_NAME","description":"integer AGENT_BY_LEGACY_NAME = 0x1;"}},{"AGENT_BY_USERNAME":{"body":["AGENT_BY_USERNAME${0}"],"prefix":"AGENT_BY_USERNAME","description":"integer AGENT_BY_USERNAME = 0x10;"}},{"AGENT_CROUCHING":{"body":["AGENT_CROUCHING${0}"],"prefix":"AGENT_CROUCHING","description":"integer AGENT_CROUCHING = 0x0400;"}},{"AGENT_FLYING":{"body":["AGENT_FLYING${0}"],"prefix":"AGENT_FLYING","description":"integer AGENT_FLYING = 0x0001;"}},{"AGENT_IN_AIR":{"body":["AGENT_IN_AIR${0}"],"prefix":"AGENT_IN_AIR","description":"integer AGENT_IN_AIR = 0x0100;"}},{"AGENT_LIST_PARCEL":{"body":["AGENT_LIST_PARCEL${0}"],"prefix":"AGENT_LIST_PARCEL","description":"integer AGENT_LIST_PARCEL = 1;"}},{"AGENT_LIST_PARCEL_OWNER":{"body":["AGENT_LIST_PARCEL_OWNER${0}"],"prefix":"AGENT_LIST_PARCEL_OWNER","description":"integer AGENT_LIST_PARCEL_OWNER = 2;"}},{"AGENT_LIST_REGION":{"body":["AGENT_LIST_REGION${0}"],"prefix":"AGENT_LIST_REGION","description":"integer AGENT_LIST_REGION = 4;"}},{"AGENT_MOUSELOOK":{"body":["AGENT_MOUSELOOK${0}"],"prefix":"AGENT_MOUSELOOK","description":"integer AGENT_MOUSELOOK = 0x0008;"}},{"AGENT_ON_OBJECT":{"body":["AGENT_ON_OBJECT${0}"],"prefix":"AGENT_ON_OBJECT","description":"integer AGENT_ON_OBJECT = 0x0020;"}},{"AGENT_SCRIPTED":{"body":["AGENT_SCRIPTED${0}"],"prefix":"AGENT_SCRIPTED","description":"integer AGENT_SCRIPTED = 0x0004;"}},{"AGENT_SITTING":{"body":["AGENT_SITTING${0}"],"prefix":"AGENT_SITTING","description":"integer AGENT_SITTING = 0x0010;"}},{"AGENT_TYPING":{"body":["AGENT_TYPING${0}"],"prefix":"AGENT_TYPING","description":"integer AGENT_TYPING = 0x0200;"}},{"AGENT_WALKING":{"body":["AGENT_WALKING${0}"],"prefix":"AGENT_WALKING","description":"integer AGENT_WALKING = 0x0080;"}},{"ALL_SIDES":{"body":["ALL_SIDES${0}"],"prefix":"ALL_SIDES","description":"integer ALL_SIDES = -1;"}},{"ANIM_ON":{"body":["ANIM_ON${0}"],"prefix":"ANIM_ON","description":"integer ANIM_ON = 0x01;"}},{"ATTACH_AVATAR_CENTER":{"body":["ATTACH_AVATAR_CENTER${0}"],"prefix":"ATTACH_AVATAR_CENTER","description":"integer ATTACH_AVATAR_CENTER = 40;"}},{"ATTACH_BACK":{"body":["ATTACH_BACK${0}"],"prefix":"ATTACH_BACK","description":"integer ATTACH_BACK = 9;"}},{"ATTACH_BELLY":{"body":["ATTACH_BELLY${0}"],"prefix":"ATTACH_BELLY","description":"integer ATTACH_BELLY = 28;"}},{"ATTACH_CHEST":{"body":["ATTACH_CHEST${0}"],"prefix":"ATTACH_CHEST","description":"integer ATTACH_CHEST = 1;"}},{"ATTACH_CHIN":{"body":["ATTACH_CHIN${0}"],"prefix":"ATTACH_CHIN","description":"integer ATTACH_CHIN = 12;"}},{"ATTACH_HEAD":{"body":["ATTACH_HEAD${0}"],"prefix":"ATTACH_HEAD","description":"integer ATTACH_HEAD = 2;"}},{"ATTACH_HUD_BOTTOM":{"body":["ATTACH_HUD_BOTTOM${0}"],"prefix":"ATTACH_HUD_BOTTOM","description":"integer ATTACH_HUD_BOTTOM = 37;"}},{"ATTACH_HUD_BOTTOM_LEFT":{"body":["ATTACH_HUD_BOTTOM_LEFT${0}"],"prefix":"ATTACH_HUD_BOTTOM_LEFT","description":"integer ATTACH_HUD_BOTTOM_LEFT = 36;"}},{"ATTACH_HUD_BOTTOM_RIGHT":{"body":["ATTACH_HUD_BOTTOM_RIGHT${0}"],"prefix":"ATTACH_HUD_BOTTOM_RIGHT","description":"integer ATTACH_HUD_BOTTOM_RIGHT = 38;"}},{"ATTACH_HUD_CENTER_1":{"body":["ATTACH_HUD_CENTER_1${0}"],"prefix":"ATTACH_HUD_CENTER_1","description":"integer ATTACH_HUD_CENTER_1 = 35;"}},{"ATTACH_HUD_CENTER_2":{"body":["ATTACH_HUD_CENTER_2${0}"],"prefix":"ATTACH_HUD_CENTER_2","description":"integer ATTACH_HUD_CENTER_2 = 31;"}},{"ATTACH_HUD_TOP_CENTER":{"body":["ATTACH_HUD_TOP_CENTER${0}"],"prefix":"ATTACH_HUD_TOP_CENTER","description":"integer ATTACH_HUD_TOP_CENTER = 33;"}},{"ATTACH_HUD_TOP_LEFT":{"body":["ATTACH_HUD_TOP_LEFT${0}"],"prefix":"ATTACH_HUD_TOP_LEFT","description":"integer ATTACH_HUD_TOP_LEFT = 34;"}},{"ATTACH_HUD_TOP_RIGHT":{"body":["ATTACH_HUD_TOP_RIGHT${0}"],"prefix":"ATTACH_HUD_TOP_RIGHT","description":"integer ATTACH_HUD_TOP_RIGHT = 32;"}},{"ATTACH_LEAR":{"body":["ATTACH_LEAR${0}"],"prefix":"ATTACH_LEAR","description":"integer ATTACH_LEAR = 13;"}},{"ATTACH_LEFT_PEC":{"body":["ATTACH_LEFT_PEC${0}"],"prefix":"ATTACH_LEFT_PEC","description":"integer ATTACH_LEFT_PEC = 29;"}},{"ATTACH_LEYE":{"body":["ATTACH_LEYE${0}"],"prefix":"ATTACH_LEYE","description":"integer ATTACH_LEYE = 15;"}},{"ATTACH_LFOOT":{"body":["ATTACH_LFOOT${0}"],"prefix":"ATTACH_LFOOT","description":"integer ATTACH_LFOOT = 7;"}},{"ATTACH_LHAND":{"body":["ATTACH_LHAND${0}"],"prefix":"ATTACH_LHAND","description":"integer ATTACH_LHAND = 5;"}},{"ATTACH_LHIP":{"body":["ATTACH_LHIP${0}"],"prefix":"ATTACH_LHIP","description":"integer ATTACH_LHIP = 25;"}},{"ATTACH_LLARM":{"body":["ATTACH_LLARM${0}"],"prefix":"ATTACH_LLARM","description":"integer ATTACH_LLARM = 21;"}},{"ATTACH_LLLEG":{"body":["ATTACH_LLLEG${0}"],"prefix":"ATTACH_LLLEG","description":"integer ATTACH_LLLEG = 27;"}},{"ATTACH_LSHOULDER":{"body":["ATTACH_LSHOULDER${0}"],"prefix":"ATTACH_LSHOULDER","description":"integer ATTACH_LSHOULDER = 3;"}},{"ATTACH_LUARM":{"body":["ATTACH_LUARM${0}"],"prefix":"ATTACH_LUARM","description":"integer ATTACH_LUARM = 20;"}},{"ATTACH_LULEG":{"body":["ATTACH_LULEG${0}"],"prefix":"ATTACH_LULEG","description":"integer ATTACH_LULEG = 26;"}},{"ATTACH_MOUTH":{"body":["ATTACH_MOUTH${0}"],"prefix":"ATTACH_MOUTH","description":"integer ATTACH_MOUTH = 11;"}},{"ATTACH_NECK":{"body":["ATTACH_NECK${0}"],"prefix":"ATTACH_NECK","description":"integer ATTACH_NECK = 39;"}},{"ATTACH_NOSE":{"body":["ATTACH_NOSE${0}"],"prefix":"ATTACH_NOSE","description":"integer ATTACH_NOSE = 17;"}},{"ATTACH_PELVIS":{"body":["ATTACH_PELVIS${0}"],"prefix":"ATTACH_PELVIS","description":"integer ATTACH_PELVIS = 10;"}},{"ATTACH_REAR":{"body":["ATTACH_REAR${0}"],"prefix":"ATTACH_REAR","description":"integer ATTACH_REAR = 14;"}},{"ATTACH_REYE":{"body":["ATTACH_REYE${0}"],"prefix":"ATTACH_REYE","description":"integer ATTACH_REYE = 16;"}},{"ATTACH_RFOOT":{"body":["ATTACH_RFOOT${0}"],"prefix":"ATTACH_RFOOT","description":"integer ATTACH_RFOOT = 8;"}},{"ATTACH_RHAND":{"body":["ATTACH_RHAND${0}"],"prefix":"ATTACH_RHAND","description":"integer ATTACH_RHAND = 6;"}},{"ATTACH_RHIP":{"body":["ATTACH_RHIP${0}"],"prefix":"ATTACH_RHIP","description":"integer ATTACH_RHIP = 22;"}},{"ATTACH_RIGHT_PEC":{"body":["ATTACH_RIGHT_PEC${0}"],"prefix":"ATTACH_RIGHT_PEC","description":"integer ATTACH_RIGHT_PEC = 30;"}},{"ATTACH_RLARM":{"body":["ATTACH_RLARM${0}"],"prefix":"ATTACH_RLARM","description":"integer ATTACH_RLARM = 19;"}},{"ATTACH_RLLEG":{"body":["ATTACH_RLLEG${0}"],"prefix":"ATTACH_RLLEG","description":"integer ATTACH_RLLEG = 24;"}},{"ATTACH_RSHOULDER":{"body":["ATTACH_RSHOULDER${0}"],"prefix":"ATTACH_RSHOULDER","description":"integer ATTACH_RSHOULDER = 4;"}},{"ATTACH_RUARM":{"body":["ATTACH_RUARM${0}"],"prefix":"ATTACH_RUARM","description":"integer ATTACH_RUARM = 18;"}},{"ATTACH_RULEG":{"body":["ATTACH_RULEG${0}"],"prefix":"ATTACH_RULEG","description":"integer ATTACH_RULEG = 23;"}},{"CAMERA_ACTIVE":{"body":["CAMERA_ACTIVE${0}"],"prefix":"CAMERA_ACTIVE","description":"integer CAMERA_ACTIVE = 12;"}},{"CAMERA_BEHINDNESS_ANGLE":{"body":["CAMERA_BEHINDNESS_ANGLE${0}"],"prefix":"CAMERA_BEHINDNESS_ANGLE","description":"integer CAMERA_BEHINDNESS_ANGLE = 8;"}},{"CAMERA_BEHINDNESS_LAG":{"body":["CAMERA_BEHINDNESS_LAG${0}"],"prefix":"CAMERA_BEHINDNESS_LAG","description":"integer CAMERA_BEHINDNESS_LAG = 9;"}},{"CAMERA_DISTANCE":{"body":["CAMERA_DISTANCE${0}"],"prefix":"CAMERA_DISTANCE","description":"integer CAMERA_DISTANCE = 7;"}},{"CAMERA_FOCUS":{"body":["CAMERA_FOCUS${0}"],"prefix":"CAMERA_FOCUS","description":"integer CAMERA_FOCUS = 17;"}},{"CAMERA_FOCUS_LAG":{"body":["CAMERA_FOCUS_LAG${0}"],"prefix":"CAMERA_FOCUS_LAG","description":"integer CAMERA_FOCUS_LAG = 6;"}},{"CAMERA_FOCUS_LOCKED":{"body":["CAMERA_FOCUS_LOCKED${0}"],"prefix":"CAMERA_FOCUS_LOCKED","description":"integer CAMERA_FOCUS_LOCKED = 22;"}},{"CAMERA_FOCUS_OFFSET":{"body":["CAMERA_FOCUS_OFFSET${0}"],"prefix":"CAMERA_FOCUS_OFFSET","description":"integer CAMERA_FOCUS_OFFSET = 1;"}},{"CAMERA_FOCUS_THRESHOLD":{"body":["CAMERA_FOCUS_THRESHOLD${0}"],"prefix":"CAMERA_FOCUS_THRESHOLD","description":"integer CAMERA_FOCUS_THRESHOLD = 11;"}},{"CAMERA_PITCH":{"body":["CAMERA_PITCH${0}"],"prefix":"CAMERA_PITCH","description":"integer CAMERA_PITCH = 0;"}},{"CAMERA_POSITION":{"body":["CAMERA_POSITION${0}"],"prefix":"CAMERA_POSITION","description":"integer CAMERA_POSITION = 13;"}},{"CAMERA_POSITION_LAG":{"body":["CAMERA_POSITION_LAG${0}"],"prefix":"CAMERA_POSITION_LAG","description":"integer CAMERA_POSITION_LAG = 5;"}},{"CAMERA_POSITION_LOCKED":{"body":["CAMERA_POSITION_LOCKED${0}"],"prefix":"CAMERA_POSITION_LOCKED","description":"integer CAMERA_POSITION_LOCKED = 21;"}},{"CAMERA_POSITION_THRESHOLD":{"body":["CAMERA_POSITION_THRESHOLD${0}"],"prefix":"CAMERA_POSITION_THRESHOLD","description":"integer CAMERA_POSITION_THRESHOLD = 10;"}},{"CHANGED_ALLOWED_DROP":{"body":["CHANGED_ALLOWED_DROP${0}"],"prefix":"CHANGED_ALLOWED_DROP","description":"integer CHANGED_ALLOWED_DROP = 0x40;"}},{"CHANGED_COLOR":{"body":["CHANGED_COLOR${0}"],"prefix":"CHANGED_COLOR","description":"integer CHANGED_COLOR = 0x2;"}},{"CHANGED_INVENTORY":{"body":["CHANGED_INVENTORY${0}"],"prefix":"CHANGED_INVENTORY","description":""}},{"CHANGED_LINK":{"body":["CHANGED_LINK${0}"],"prefix":"CHANGED_LINK","description":"integer CHANGED_LINK = 0x20;"}},{"CHANGED_MEDIA":{"body":["CHANGED_MEDIA${0}"],"prefix":"CHANGED_MEDIA","description":"integer CHANGED_MEDIA = 0x800;"}},{"CHANGED_OWNER":{"body":["CHANGED_OWNER${0}"],"prefix":"CHANGED_OWNER","description":"integer CHANGED_OWNER = 0x80;"}},{"CHANGED_REGION":{"body":["CHANGED_REGION${0}"],"prefix":"CHANGED_REGION","description":"integer CHANGED_REGION = 0x100;"}},{"CHANGED_REGION_START":{"body":["CHANGED_REGION_START${0}"],"prefix":"CHANGED_REGION_START","description":"integer CHANGED_REGION_START = 0x400;"}},{"CHANGED_SCALE":{"body":["CHANGED_SCALE${0}"],"prefix":"CHANGED_SCALE","description":""}},{"CHANGED_SHAPE":{"body":["CHANGED_SHAPE${0}"],"prefix":"CHANGED_SHAPE","description":"integer CHANGED_SHAPE = 0x4;"}},{"CHANGED_TELEPORT":{"body":["CHANGED_TELEPORT${0}"],"prefix":"CHANGED_TELEPORT","description":"integer CHANGED_TELEPORT = 0x200;"}},{"CHANGED_TEXTURE":{"body":["CHANGED_TEXTURE${0}"],"prefix":"CHANGED_TEXTURE","description":"integer CHANGED_TEXTURE = 0x10;"}},{"CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES":{"body":["CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES${0}"],"prefix":"CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES","description":"integer CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES = 14;"}},{"CHARACTER_AVOIDANCE_MODE":{"body":["CHARACTER_AVOIDANCE_MODE${0}"],"prefix":"CHARACTER_AVOIDANCE_MODE","description":"integer CHARACTER_AVOIDANCE_MODE = 5;"}},{"CHARACTER_DESIRED_SPEED":{"body":["CHARACTER_DESIRED_SPEED${0}"],"prefix":"CHARACTER_DESIRED_SPEED","description":"integer CHARACTER_DESIRED_SPEED = 1;"}},{"CHARACTER_DESIRED_TURN_SPEED":{"body":["CHARACTER_DESIRED_TURN_SPEED${0}"],"prefix":"CHARACTER_DESIRED_TURN_SPEED","description":"integer CHARACTER_DESIRED_TURN_SPEED = 12;"}},{"CHARACTER_LENGTH":{"body":["CHARACTER_LENGTH${0}"],"prefix":"CHARACTER_LENGTH","description":"integer CHARACTER_LENGTH = 3;"}},{"CHARACTER_MAX_ACCEL":{"body":["CHARACTER_MAX_ACCEL${0}"],"prefix":"CHARACTER_MAX_ACCEL","description":"integer CHARACTER_MAX_ACCEL = 8;"}},{"CHARACTER_MAX_DECEL":{"body":["CHARACTER_MAX_DECEL${0}"],"prefix":"CHARACTER_MAX_DECEL","description":"integer CHARACTER_MAX_DECEL = 9;"}},{"CHARACTER_MAX_SPEED":{"body":["CHARACTER_MAX_SPEED${0}"],"prefix":"CHARACTER_MAX_SPEED","description":"integer CHARACTER_MAX_SPEED = 13;"}},{"CHARACTER_MAX_TURN_RADIUS":{"body":["CHARACTER_MAX_TURN_RADIUS${0}"],"prefix":"CHARACTER_MAX_TURN_RADIUS","description":"integer CHARACTER_MAX_TURN_RADIUS = 10;"}},{"CHARACTER_ORIENTATION":{"body":["CHARACTER_ORIENTATION${0}"],"prefix":"CHARACTER_ORIENTATION","description":"integer CHARACTER_ORIENTATION = 4;"}},{"CHARACTER_RADIUS":{"body":["CHARACTER_RADIUS${0}"],"prefix":"CHARACTER_RADIUS","description":"integer CHARACTER_RADIUS = 2;"}},{"CHARACTER_STAY_WITHIN_PARCEL":{"body":["CHARACTER_STAY_WITHIN_PARCEL${0}"],"prefix":"CHARACTER_STAY_WITHIN_PARCEL","description":"integer CHARACTER_STAY_WITHIN_PARCEL = 15;"}},{"CHARACTER_TYPE":{"body":["CHARACTER_TYPE${0}"],"prefix":"CHARACTER_TYPE","description":"integer CHARACTER_TYPE = 6;"}},{"CHARACTER_TYPE_A":{"body":["CHARACTER_TYPE_A${0}"],"prefix":"CHARACTER_TYPE_A","description":"integer CHARACTER_TYPE_A = 0;"}},{"CHARACTER_TYPE_B":{"body":["CHARACTER_TYPE_B${0}"],"prefix":"CHARACTER_TYPE_B","description":"integer CHARACTER_TYPE_B = 1;"}},{"CHARACTER_TYPE_C":{"body":["CHARACTER_TYPE_C${0}"],"prefix":"CHARACTER_TYPE_C","description":"integer CHARACTER_TYPE_C = 2;"}},{"CHARACTER_TYPE_D":{"body":["CHARACTER_TYPE_D${0}"],"prefix":"CHARACTER_TYPE_D","description":"integer CHARACTER_TYPE_D = 3;"}},{"CHARACTER_TYPE_NONE":{"body":["CHARACTER_TYPE_NONE${0}"],"prefix":"CHARACTER_TYPE_NONE","description":"integer CHARACTER_TYPE_NONE = 4;"}},{"CLICK_ACTION_BUY":{"body":["CLICK_ACTION_BUY${0}"],"prefix":"CLICK_ACTION_BUY","description":"integer CLICK_ACTION_BUY = 2;"}},{"CLICK_ACTION_NONE":{"body":["CLICK_ACTION_NONE${0}"],"prefix":"CLICK_ACTION_NONE","description":"integer CLICK_ACTION_NONE = 0;"}},{"CLICK_ACTION_OPEN":{"body":["CLICK_ACTION_OPEN${0}"],"prefix":"CLICK_ACTION_OPEN","description":"integer CLICK_ACTION_OPEN = 4;"}},{"CLICK_ACTION_OPEN_MEDIA":{"body":["CLICK_ACTION_OPEN_MEDIA${0}"],"prefix":"CLICK_ACTION_OPEN_MEDIA","description":"integer CLICK_ACTION_OPEN_MEDIA = 6;"}},{"CLICK_ACTION_PAY":{"body":["CLICK_ACTION_PAY${0}"],"prefix":"CLICK_ACTION_PAY","description":"integer CLICK_ACTION_PAY = 3;"}},{"CLICK_ACTION_PLAY":{"body":["CLICK_ACTION_PLAY${0}"],"prefix":"CLICK_ACTION_PLAY","description":"integer CLICK_ACTION_PLAY = 5;"}},{"CLICK_ACTION_SIT":{"body":["CLICK_ACTION_SIT${0}"],"prefix":"CLICK_ACTION_SIT","description":"integer CLICK_ACTION_SIT = 1;"}},{"CLICK_ACTION_TOUCH":{"body":["CLICK_ACTION_TOUCH${0}"],"prefix":"CLICK_ACTION_TOUCH","description":"integer CLICK_ACTION_TOUCH = 0;"}},{"CLICK_ACTION_ZOOM":{"body":["CLICK_ACTION_ZOOM${0}"],"prefix":"CLICK_ACTION_ZOOM","description":"integer CLICK_ACTION_ZOOM = 7;"}},{"CONTENT_TYPE_ATOM":{"body":["CONTENT_TYPE_ATOM${0}"],"prefix":"CONTENT_TYPE_ATOM","description":"integer CONTENT_TYPE_ATOM = 4;"}},{"CONTENT_TYPE_FORM":{"body":["CONTENT_TYPE_FORM${0}"],"prefix":"CONTENT_TYPE_FORM","description":"integer CONTENT_TYPE_FORM = 7;"}},{"CONTENT_TYPE_HTML":{"body":["CONTENT_TYPE_HTML${0}"],"prefix":"CONTENT_TYPE_HTML","description":"integer CONTENT_TYPE_HTML = 1;"}},{"CONTENT_TYPE_JSON":{"body":["CONTENT_TYPE_JSON${0}"],"prefix":"CONTENT_TYPE_JSON","description":"integer CONTENT_TYPE_JSON = 5;"}},{"CONTENT_TYPE_LLSD":{"body":["CONTENT_TYPE_LLSD${0}"],"prefix":"CONTENT_TYPE_LLSD","description":"integer CONTENT_TYPE_LLSD = 6;"}},{"CONTENT_TYPE_RSS":{"body":["CONTENT_TYPE_RSS${0}"],"prefix":"CONTENT_TYPE_RSS","description":"integer CONTENT_TYPE_RSS = 8;"}},{"CONTENT_TYPE_TEXT":{"body":["CONTENT_TYPE_TEXT${0}"],"prefix":"CONTENT_TYPE_TEXT","description":"integer CONTENT_TYPE_TEXT = 0;"}},{"CONTENT_TYPE_XHTML":{"body":["CONTENT_TYPE_XHTML${0}"],"prefix":"CONTENT_TYPE_XHTML","description":"integer CONTENT_TYPE_XHTML = 3;"}},{"CONTENT_TYPE_XML":{"body":["CONTENT_TYPE_XML${0}"],"prefix":"CONTENT_TYPE_XML","description":"integer CONTENT_TYPE_XML = 2;"}},{"CONTROL_BACK":{"body":["CONTROL_BACK${0}"],"prefix":"CONTROL_BACK","description":"integer CONTROL_BACK = 0x2;"}},{"CONTROL_DOWN":{"body":["CONTROL_DOWN${0}"],"prefix":"CONTROL_DOWN","description":"integer CONTROL_DOWN = 0x20;"}},{"CONTROL_FWD":{"body":["CONTROL_FWD${0}"],"prefix":"CONTROL_FWD","description":"integer CONTROL_FWD = 0x1;"}},{"CONTROL_LBUTTON":{"body":["CONTROL_LBUTTON${0}"],"prefix":"CONTROL_LBUTTON","description":"integer CONTROL_LBUTTON = 0x10000000;"}},{"CONTROL_LEFT":{"body":["CONTROL_LEFT${0}"],"prefix":"CONTROL_LEFT","description":"integer CONTROL_LEFT = 0x4;"}},{"CONTROL_ML_LBUTTON":{"body":["CONTROL_ML_LBUTTON${0}"],"prefix":"CONTROL_ML_LBUTTON","description":"integer CONTROL_ML_LBUTTON = 0x40000000;"}},{"CONTROL_RIGHT":{"body":["CONTROL_RIGHT${0}"],"prefix":"CONTROL_RIGHT","description":"integer CONTROL_RIGHT = 0x8;"}},{"CONTROL_ROT_LEFT":{"body":["CONTROL_ROT_LEFT${0}"],"prefix":"CONTROL_ROT_LEFT","description":"integer CONTROL_ROT_LEFT = 0x100;"}},{"CONTROL_ROT_RIGHT":{"body":["CONTROL_ROT_RIGHT${0}"],"prefix":"CONTROL_ROT_RIGHT","description":"integer CONTROL_ROT_RIGHT = 0x200;"}},{"CONTROL_UP":{"body":["CONTROL_UP${0}"],"prefix":"CONTROL_UP","description":"integer CONTROL_UP = 0x10;"}},{"DATA_BORN":{"body":["DATA_BORN${0}"],"prefix":"DATA_BORN","description":"integer DATA_BORN = 3;"}},{"DATA_NAME":{"body":["DATA_NAME${0}"],"prefix":"DATA_NAME","description":"integer DATA_NAME = 2;"}},{"DATA_ONLINE":{"body":["DATA_ONLINE${0}"],"prefix":"DATA_ONLINE","description":""}},{"DATA_PAYINFO":{"body":["DATA_PAYINFO${0}"],"prefix":"DATA_PAYINFO","description":"integer DATA_PAYINFO = 8;"}},{"DATA_RATING":{"body":["DATA_RATING${0}"],"prefix":"DATA_RATING","description":"integer DATA_RATING = 4;"}},{"DATA_SIM_POS":{"body":["DATA_SIM_POS${0}"],"prefix":"DATA_SIM_POS","description":"integer DATA_SIM_POS = 5;"}},{"DATA_SIM_RATING":{"body":["DATA_SIM_RATING${0}"],"prefix":"DATA_SIM_RATING","description":"integer DATA_SIM_RATING = 7;"}},{"DATA_SIM_STATUS":{"body":["DATA_SIM_STATUS${0}"],"prefix":"DATA_SIM_STATUS","description":"integer DATA_SIM_STATUS = 6;"}},{"DEBUG_CHANNEL":{"body":["DEBUG_CHANNEL${0}"],"prefix":"DEBUG_CHANNEL","description":"integer DEBUG_CHANNEL = 0x7FFFFFFF;"}},{"DEG_TO_RAD":{"body":["DEG_TO_RAD${0}"],"prefix":"DEG_TO_RAD","description":"float DEG_TO_RAD = 0.017453292519943295769236907684886f;"}},{"EOF":{"body":["EOF${0}"],"prefix":"EOF","description":"string EOF = \"\\n\\n\\n\";"}},{"ERR_GENERIC":{"body":["ERR_GENERIC${0}"],"prefix":"ERR_GENERIC","description":"integer ERR_GENERIC = -1;"}},{"ERR_MALFORMED_PARAMS":{"body":["ERR_MALFORMED_PARAMS${0}"],"prefix":"ERR_MALFORMED_PARAMS","description":"integer ERR_MALFORMED_PARAMS = -3;"}},{"ERR_PARCEL_PERMISSIONS":{"body":["ERR_PARCEL_PERMISSIONS${0}"],"prefix":"ERR_PARCEL_PERMISSIONS","description":"integer ERR_PARCEL_PERMISSIONS = -2;"}},{"ERR_RUNTIME_PERMISSIONS":{"body":["ERR_RUNTIME_PERMISSIONS${0}"],"prefix":"ERR_RUNTIME_PERMISSIONS","description":"integer ERR_RUNTIME_PERMISSIONS = -4;"}},{"ERR_THROTTLED":{"body":["ERR_THROTTLED${0}"],"prefix":"ERR_THROTTLED","description":"integer ERR_THROTTLED = -5;"}},{"ESTATE_ACCESS_ALLOWED_AGENT_ADD":{"body":["ESTATE_ACCESS_ALLOWED_AGENT_ADD${0}"],"prefix":"ESTATE_ACCESS_ALLOWED_AGENT_ADD","description":"integer ESTATE_ACCESS_ALLOWED_AGENT_ADD = 4;"}},{"ESTATE_ACCESS_ALLOWED_AGENT_REMOVE":{"body":["ESTATE_ACCESS_ALLOWED_AGENT_REMOVE${0}"],"prefix":"ESTATE_ACCESS_ALLOWED_AGENT_REMOVE","description":"integer ESTATE_ACCESS_ALLOWED_AGENT_REMOVE = 8;"}},{"ESTATE_ACCESS_ALLOWED_GROUP_ADD":{"body":["ESTATE_ACCESS_ALLOWED_GROUP_ADD${0}"],"prefix":"ESTATE_ACCESS_ALLOWED_GROUP_ADD","description":"integer ESTATE_ACCESS_ALLOWED_GROUP_ADD = 16;"}},{"ESTATE_ACCESS_ALLOWED_GROUP_REMOVE":{"body":["ESTATE_ACCESS_ALLOWED_GROUP_REMOVE${0}"],"prefix":"ESTATE_ACCESS_ALLOWED_GROUP_REMOVE","description":"integer ESTATE_ACCESS_ALLOWED_GROUP_REMOVE = 32;"}},{"ESTATE_ACCESS_BANNED_AGENT_ADD":{"body":["ESTATE_ACCESS_BANNED_AGENT_ADD${0}"],"prefix":"ESTATE_ACCESS_BANNED_AGENT_ADD","description":""}},{"ESTATE_ACCESS_BANNED_AGENT_REMOVE":{"body":["ESTATE_ACCESS_BANNED_AGENT_REMOVE${0}"],"prefix":"ESTATE_ACCESS_BANNED_AGENT_REMOVE","description":"integer ESTATE_ACCESS_BANNED_AGENT_REMOVE = 128;"}},{"FALSE":{"body":["FALSE${0}"],"prefix":"FALSE","description":"integer FALSE = 0;"}},{"FORCE_DIRECT_PATH":{"body":["FORCE_DIRECT_PATH${0}"],"prefix":"FORCE_DIRECT_PATH","description":"integer FORCE_DIRECT_PATH = 1;"}},{"HORIZONTAL":{"body":["HORIZONTAL${0}"],"prefix":"HORIZONTAL","description":"integer HORIZONTAL = 1;"}},{"HTTP_ACCEPT":{"body":["HTTP_ACCEPT${0}"],"prefix":"HTTP_ACCEPT","description":"integer HTTP_ACCEPT = 8;"}},{"HTTP_BODY_MAXLENGTH":{"body":["HTTP_BODY_MAXLENGTH${0}"],"prefix":"HTTP_BODY_MAXLENGTH","description":"integer HTTP_BODY_MAXLENGTH = 2;"}},{"HTTP_BODY_TRUNCATED":{"body":["HTTP_BODY_TRUNCATED${0}"],"prefix":"HTTP_BODY_TRUNCATED","description":"integer HTTP_BODY_TRUNCATED = 0;"}},{"HTTP_CUSTOM_HEADER":{"body":["HTTP_CUSTOM_HEADER${0}"],"prefix":"HTTP_CUSTOM_HEADER","description":"integer HTTP_CUSTOM_HEADER = 5;"}},{"HTTP_METHOD":{"body":["HTTP_METHOD${0}"],"prefix":"HTTP_METHOD","description":"integer HTTP_METHOD = 0;"}},{"HTTP_MIMETYPE":{"body":["HTTP_MIMETYPE${0}"],"prefix":"HTTP_MIMETYPE","description":"integer HTTP_MIMETYPE = 1;"}},{"HTTP_PRAGMA_NO_CACHE":{"body":["HTTP_PRAGMA_NO_CACHE${0}"],"prefix":"HTTP_PRAGMA_NO_CACHE","description":"integer HTTP_PRAGMA_NO_CACHE = 6;"}},{"HTTP_USER_AGENT":{"body":["HTTP_USER_AGENT${0}"],"prefix":"HTTP_USER_AGENT","description":"integer HTTP_USER_AGENT = 7;"}},{"HTTP_VERBOSE_THROTTLE":{"body":["HTTP_VERBOSE_THROTTLE${0}"],"prefix":"HTTP_VERBOSE_THROTTLE","description":"integer HTTP_VERBOSE_THROTTLE = 4;"}},{"HTTP_VERIFY_CERT":{"body":["HTTP_VERIFY_CERT${0}"],"prefix":"HTTP_VERIFY_CERT","description":"integer HTTP_VERIFY_CERT = 3;"}},{"INVENTORY_ALL":{"body":["INVENTORY_ALL${0}"],"prefix":"INVENTORY_ALL","description":"integer INVENTORY_ALL = -1;"}},{"INVENTORY_ANIMATION":{"body":["INVENTORY_ANIMATION${0}"],"prefix":"INVENTORY_ANIMATION","description":"integer INVENTORY_ANIMATION = 20;"}},{"INVENTORY_BODYPART":{"body":["INVENTORY_BODYPART${0}"],"prefix":"INVENTORY_BODYPART","description":"integer INVENTORY_BODYPART = 13;"}},{"INVENTORY_CLOTHING":{"body":["INVENTORY_CLOTHING${0}"],"prefix":"INVENTORY_CLOTHING","description":"integer INVENTORY_CLOTHING = 5;"}},{"INVENTORY_GESTURE":{"body":["INVENTORY_GESTURE${0}"],"prefix":"INVENTORY_GESTURE","description":"integer INVENTORY_GESTURE = 21;"}},{"INVENTORY_LANDMARK":{"body":["INVENTORY_LANDMARK${0}"],"prefix":"INVENTORY_LANDMARK","description":"integer INVENTORY_LANDMARK = 3;"}},{"INVENTORY_NONE":{"body":["INVENTORY_NONE${0}"],"prefix":"INVENTORY_NONE","description":"integer INVENTORY_NONE = -1;"}},{"INVENTORY_NOTECARD":{"body":["INVENTORY_NOTECARD${0}"],"prefix":"INVENTORY_NOTECARD","description":"integer INVENTORY_NOTECARD = 7;"}},{"INVENTORY_OBJECT":{"body":["INVENTORY_OBJECT${0}"],"prefix":"INVENTORY_OBJECT","description":"integer INVENTORY_OBJECT = 6;"}},{"INVENTORY_SCRIPT":{"body":["INVENTORY_SCRIPT${0}"],"prefix":"INVENTORY_SCRIPT","description":"integer INVENTORY_SCRIPT = 10;"}},{"INVENTORY_SOUND":{"body":["INVENTORY_SOUND${0}"],"prefix":"INVENTORY_SOUND","description":"integer INVENTORY_SOUND = 1;"}},{"INVENTORY_TEXTURE":{"body":["INVENTORY_TEXTURE${0}"],"prefix":"INVENTORY_TEXTURE","description":"integer INVENTORY_TEXTURE = 0;"}},{"JSON_APPEND":{"body":["JSON_APPEND${0}"],"prefix":"JSON_APPEND","description":"integer JSON_APPEND = -1;"}},{"JSON_ARRAY":{"body":["JSON_ARRAY${0}"],"prefix":"JSON_ARRAY","description":"string JSON_ARRAY = \"\ufdd2\";"}},{"JSON_DELETE":{"body":["JSON_DELETE${0}"],"prefix":"JSON_DELETE","description":"string JSON_DELETE = \"\ufffd\";"}},{"JSON_FALSE":{"body":["JSON_FALSE${0}"],"prefix":"JSON_FALSE","description":"string JSON_FALSE = \"\ufffd\";"}},{"JSON_INVALID":{"body":["JSON_INVALID${0}"],"prefix":"JSON_INVALID","description":"string JSON_INVALID = \"\ufdd0\";"}},{"JSON_NULL":{"body":["JSON_NULL${0}"],"prefix":"JSON_NULL","description":"string JSON_NULL = \"\ufffd\";"}},{"JSON_NUMBER":{"body":["JSON_NUMBER${0}"],"prefix":"JSON_NUMBER","description":"string JSON_NUMBER = \"\ufffd\";"}},{"JSON_OBJECT":{"body":["JSON_OBJECT${0}"],"prefix":"JSON_OBJECT","description":"string JSON_OBJECT = \"\ufdd1\";"}},{"JSON_STRING":{"body":["JSON_STRING${0}"],"prefix":"JSON_STRING","description":"string JSON_STRING = \"\ufffd\";"}},{"JSON_TRUE":{"body":["JSON_TRUE${0}"],"prefix":"JSON_TRUE","description":"string JSON_TRUE = \"\ufffd\";"}},{"KFM_CMD_PAUSE":{"body":["KFM_CMD_PAUSE${0}"],"prefix":"KFM_CMD_PAUSE","description":"integer KFM_CMD_PAUSE = 2;"}},{"KFM_CMD_PLAY":{"body":["KFM_CMD_PLAY${0}"],"prefix":"KFM_CMD_PLAY","description":"integer KFM_CMD_PLAY = 0;"}},{"KFM_CMD_STOP":{"body":["KFM_CMD_STOP${0}"],"prefix":"KFM_CMD_STOP","description":"integer KFM_CMD_STOP = 1;"}},{"KFM_COMMAND":{"body":["KFM_COMMAND${0}"],"prefix":"KFM_COMMAND","description":"integer KFM_COMMAND = 0;"}},{"KFM_DATA":{"body":["KFM_DATA${0}"],"prefix":"KFM_DATA","description":"integer KFM_DATA = 2;"}},{"KFM_FORWARD":{"body":["KFM_FORWARD${0}"],"prefix":"KFM_FORWARD","description":"integer KFM_FORWARD = 0;"}},{"KFM_LOOP":{"body":["KFM_LOOP${0}"],"prefix":"KFM_LOOP","description":"integer KFM_LOOP = 1;"}},{"KFM_MODE":{"body":["KFM_MODE${0}"],"prefix":"KFM_MODE","description":"integer KFM_MODE = 1;"}},{"KFM_PING_PONG":{"body":["KFM_PING_PONG${0}"],"prefix":"KFM_PING_PONG","description":"integer KFM_PING_PONG = 2;"}},{"KFM_REVERSE":{"body":["KFM_REVERSE${0}"],"prefix":"KFM_REVERSE","description":"integer KFM_REVERSE = 3;"}},{"KFM_ROTATION":{"body":["KFM_ROTATION${0}"],"prefix":"KFM_ROTATION","description":"integer KFM_ROTATION = 0x1;"}},{"KFM_TRANSLATION":{"body":["KFM_TRANSLATION${0}"],"prefix":"KFM_TRANSLATION","description":"integer KFM_TRANSLATION = 0x2;"}},{"LAND_LEVEL":{"body":["LAND_LEVEL${0}"],"prefix":"LAND_LEVEL","description":"integer LAND_LEVEL = 0;"}},{"LAND_LOWER":{"body":["LAND_LOWER${0}"],"prefix":"LAND_LOWER","description":"integer LAND_LOWER = 2;"}},{"LAND_NOISE":{"body":["LAND_NOISE${0}"],"prefix":"LAND_NOISE","description":"integer LAND_NOISE = 4;"}},{"LAND_RAISE":{"body":["LAND_RAISE${0}"],"prefix":"LAND_RAISE","description":"integer LAND_RAISE = 1;"}},{"LAND_REVERT":{"body":["LAND_REVERT${0}"],"prefix":"LAND_REVERT","description":"integer LAND_REVERT = 5;"}},{"LAND_SMOOTH":{"body":["LAND_SMOOTH${0}"],"prefix":"LAND_SMOOTH","description":"integer LAND_SMOOTH = 3;"}},{"LINK_ALL_CHILDREN":{"body":["LINK_ALL_CHILDREN${0}"],"prefix":"LINK_ALL_CHILDREN","description":""}},{"LINK_ALL_OTHERS":{"body":["LINK_ALL_OTHERS${0}"],"prefix":"LINK_ALL_OTHERS","description":""}},{"LINK_ROOT":{"body":["LINK_ROOT${0}"],"prefix":"LINK_ROOT","description":"integer LINK_ROOT = 1;"}},{"LINK_SET":{"body":["LINK_SET${0}"],"prefix":"LINK_SET","description":""}},{"LINK_THIS":{"body":["LINK_THIS${0}"],"prefix":"LINK_THIS","description":""}},{"LIST_STAT_GEOMETRIC_MEAN":{"body":["LIST_STAT_GEOMETRIC_MEAN${0}"],"prefix":"LIST_STAT_GEOMETRIC_MEAN","description":"integer LIST_STAT_GEOMETRIC_MEAN = 9;"}},{"LIST_STAT_MAX":{"body":["LIST_STAT_MAX${0}"],"prefix":"LIST_STAT_MAX","description":"integer LIST_STAT_MAX = 2;"}},{"LIST_STAT_MEAN":{"body":["LIST_STAT_MEAN${0}"],"prefix":"LIST_STAT_MEAN","description":"integer LIST_STAT_MEAN = 3;"}},{"LIST_STAT_MEDIAN":{"body":["LIST_STAT_MEDIAN${0}"],"prefix":"LIST_STAT_MEDIAN","description":"integer LIST_STAT_MEDIAN = 4;"}},{"LIST_STAT_MIN":{"body":["LIST_STAT_MIN${0}"],"prefix":"LIST_STAT_MIN","description":"integer LIST_STAT_MIN = 1;"}},{"LIST_STAT_NUM_COUNT":{"body":["LIST_STAT_NUM_COUNT${0}"],"prefix":"LIST_STAT_NUM_COUNT","description":"integer LIST_STAT_NUM_COUNT = 8;"}},{"LIST_STAT_RANGE":{"body":["LIST_STAT_RANGE${0}"],"prefix":"LIST_STAT_RANGE","description":"integer LIST_STAT_RANGE = 0;"}},{"LIST_STAT_STD_DEV":{"body":["LIST_STAT_STD_DEV${0}"],"prefix":"LIST_STAT_STD_DEV","description":"integer LIST_STAT_STD_DEV = 5;"}},{"LIST_STAT_SUM":{"body":["LIST_STAT_SUM${0}"],"prefix":"LIST_STAT_SUM","description":"integer LIST_STAT_SUM = 6;"}},{"LIST_STAT_SUM_SQUARES":{"body":["LIST_STAT_SUM_SQUARES${0}"],"prefix":"LIST_STAT_SUM_SQUARES","description":"integer LIST_STAT_SUM_SQUARES = 7;"}},{"LOOP":{"body":["LOOP${0}"],"prefix":"LOOP","description":"integer LOOP = 0x02;"}},{"MASK_BASE":{"body":["MASK_BASE${0}"],"prefix":"MASK_BASE","description":"integer MASK_BASE = 0;"}},{"MASK_EVERYONE":{"body":["MASK_EVERYONE${0}"],"prefix":"MASK_EVERYONE","description":"integer MASK_EVERYONE = 3;"}},{"MASK_GROUP":{"body":["MASK_GROUP${0}"],"prefix":"MASK_GROUP","description":"integer MASK_GROUP = 2;"}},{"MASK_NEXT":{"body":["MASK_NEXT${0}"],"prefix":"MASK_NEXT","description":"integer MASK_NEXT = 4;"}},{"MASK_OWNER":{"body":["MASK_OWNER${0}"],"prefix":"MASK_OWNER","description":"integer MASK_OWNER = 1;"}},{"NULL_KEY":{"body":["NULL_KEY${0}"],"prefix":"NULL_KEY","description":"string NULL_KEY = \"00000000-0000-0000-0000-000000000000\";"}},{"OBJECT_ATTACHED_POINT":{"body":["OBJECT_ATTACHED_POINT${0}"],"prefix":"OBJECT_ATTACHED_POINT","description":"integer OBJECT_ATTACHED_POINT = 19;"}},{"OBJECT_BODY_SHAPE_TYPE":{"body":["OBJECT_BODY_SHAPE_TYPE${0}"],"prefix":"OBJECT_BODY_SHAPE_TYPE","description":"integer OBJECT_BODY_SHAPE_TYPE = 26;"}},{"OBJECT_CHARACTER_TIME":{"body":["OBJECT_CHARACTER_TIME${0}"],"prefix":"OBJECT_CHARACTER_TIME","description":"integer OBJECT_CHARACTER_TIME = 17;"}},{"OBJECT_CLICK_ACTION":{"body":["OBJECT_CLICK_ACTION${0}"],"prefix":"OBJECT_CLICK_ACTION","description":"integer OBJECT_CLICK_ACTION = 28;"}},{"OBJECT_CREATOR":{"body":["OBJECT_CREATOR${0}"],"prefix":"OBJECT_CREATOR","description":"integer OBJECT_CREATOR = 8;"}},{"OBJECT_DESC":{"body":["OBJECT_DESC${0}"],"prefix":"OBJECT_DESC","description":"integer OBJECT_DESC = 2;"}},{"OBJECT_GROUP":{"body":["OBJECT_GROUP${0}"],"prefix":"OBJECT_GROUP","description":"integer OBJECT_GROUP = 7;"}},{"OBJECT_HOVER_HEIGHT":{"body":["OBJECT_HOVER_HEIGHT${0}"],"prefix":"OBJECT_HOVER_HEIGHT","description":"integer OBJECT_HOVER_HEIGHT = 25;"}},{"OBJECT_LAST_OWNER_ID":{"body":["OBJECT_LAST_OWNER_ID${0}"],"prefix":"OBJECT_LAST_OWNER_ID","description":"integer OBJECT_LAST_OWNER_ID = 27;"}},{"OBJECT_NAME":{"body":["OBJECT_NAME${0}"],"prefix":"OBJECT_NAME","description":"integer OBJECT_NAME = 1;"}},{"OBJECT_OMEGA":{"body":["OBJECT_OMEGA${0}"],"prefix":"OBJECT_OMEGA","description":"integer OBJECT_OMEGA = 29;"}},{"OBJECT_OWNER":{"body":["OBJECT_OWNER${0}"],"prefix":"OBJECT_OWNER","description":"integer OBJECT_OWNER = 6;"}},{"OBJECT_PATHFINDING_TYPE":{"body":["OBJECT_PATHFINDING_TYPE${0}"],"prefix":"OBJECT_PATHFINDING_TYPE","description":"integer OBJECT_PATHFINDING_TYPE = 20;"}},{"OBJECT_PHANTOM":{"body":["OBJECT_PHANTOM${0}"],"prefix":"OBJECT_PHANTOM","description":"integer OBJECT_PHANTOM = 22;"}},{"OBJECT_PHYSICS":{"body":["OBJECT_PHYSICS${0}"],"prefix":"OBJECT_PHYSICS","description":"integer OBJECT_PHYSICS = 21;"}},{"OBJECT_PHYSICS_COST":{"body":["OBJECT_PHYSICS_COST${0}"],"prefix":"OBJECT_PHYSICS_COST","description":"integer OBJECT_PHYSICS_COST = 16;"}},{"OBJECT_POS":{"body":["OBJECT_POS${0}"],"prefix":"OBJECT_POS","description":"integer OBJECT_POS = 3;"}},{"OBJECT_PRIM_COUNT":{"body":["OBJECT_PRIM_COUNT${0}"],"prefix":"OBJECT_PRIM_COUNT","description":"integer OBJECT_PRIM_COUNT = 30;"}},{"OBJECT_PRIM_EQUIVALENCE":{"body":["OBJECT_PRIM_EQUIVALENCE${0}"],"prefix":"OBJECT_PRIM_EQUIVALENCE","description":"integer OBJECT_PRIM_EQUIVALENCE = 13;"}},{"OBJECT_RENDER_WEIGHT":{"body":["OBJECT_RENDER_WEIGHT${0}"],"prefix":"OBJECT_RENDER_WEIGHT","description":"integer OBJECT_RENDER_WEIGHT = 24;"}},{"OBJECT_RETURN_PARCEL":{"body":["OBJECT_RETURN_PARCEL${0}"],"prefix":"OBJECT_RETURN_PARCEL","description":"integer OBJECT_RETURN_PARCEL = 1;"}},{"OBJECT_RETURN_PARCEL_OWNER":{"body":["OBJECT_RETURN_PARCEL_OWNER${0}"],"prefix":"OBJECT_RETURN_PARCEL_OWNER","description":"integer OBJECT_RETURN_PARCEL_OWNER = 2;"}},{"OBJECT_RETURN_REGION":{"body":["OBJECT_RETURN_REGION${0}"],"prefix":"OBJECT_RETURN_REGION","description":"integer OBJECT_RETURN_REGION = 4;"}},{"OBJECT_ROOT":{"body":["OBJECT_ROOT${0}"],"prefix":"OBJECT_ROOT","description":"integer OBJECT_ROOT = 18;"}},{"OBJECT_ROT":{"body":["OBJECT_ROT${0}"],"prefix":"OBJECT_ROT","description":"integer OBJECT_ROT = 4;"}},{"OBJECT_RUNNING_SCRIPT_COUNT":{"body":["OBJECT_RUNNING_SCRIPT_COUNT${0}"],"prefix":"OBJECT_RUNNING_SCRIPT_COUNT","description":"integer OBJECT_RUNNING_SCRIPT_COUNT = 9;"}},{"OBJECT_SCRIPT_MEMORY":{"body":["OBJECT_SCRIPT_MEMORY${0}"],"prefix":"OBJECT_SCRIPT_MEMORY","description":"integer OBJECT_SCRIPT_MEMORY = 11;"}},{"OBJECT_SCRIPT_TIME":{"body":["OBJECT_SCRIPT_TIME${0}"],"prefix":"OBJECT_SCRIPT_TIME","description":"integer OBJECT_SCRIPT_TIME = 12;"}},{"OBJECT_SERVER_COST":{"body":["OBJECT_SERVER_COST${0}"],"prefix":"OBJECT_SERVER_COST","description":"integer OBJECT_SERVER_COST = 14;"}},{"OBJECT_STREAMING_COST":{"body":["OBJECT_STREAMING_COST${0}"],"prefix":"OBJECT_STREAMING_COST","description":"integer OBJECT_STREAMING_COST = 15;"}},{"OBJECT_TEMP_ON_REZ":{"body":["OBJECT_TEMP_ON_REZ${0}"],"prefix":"OBJECT_TEMP_ON_REZ","description":"integer OBJECT_TEMP_ON_REZ = 23;"}},{"OBJECT_TOTAL_INVENTORY_COUNT":{"body":["OBJECT_TOTAL_INVENTORY_COUNT${0}"],"prefix":"OBJECT_TOTAL_INVENTORY_COUNT","description":"integer OBJECT_TOTAL_INVENTORY_COUNT = 31;"}},{"OBJECT_TOTAL_SCRIPT_COUNT":{"body":["OBJECT_TOTAL_SCRIPT_COUNT${0}"],"prefix":"OBJECT_TOTAL_SCRIPT_COUNT","description":"integer OBJECT_TOTAL_SCRIPT_COUNT = 10;"}},{"OBJECT_UNKNOWN_DETAIL":{"body":["OBJECT_UNKNOWN_DETAIL${0}"],"prefix":"OBJECT_UNKNOWN_DETAIL","description":"integer OBJECT_UNKNOWN_DETAIL = -1;"}},{"OBJECT_VELOCITY":{"body":["OBJECT_VELOCITY${0}"],"prefix":"OBJECT_VELOCITY","description":"integer OBJECT_VELOCITY = 5;"}},{"OPT_CHARACTER":{"body":["OPT_CHARACTER${0}"],"prefix":"OPT_CHARACTER","description":"integer OPT CHARACTER = 2;"}},{"OPT_AVATAR":{"body":["OPT_AVATAR${0}"],"prefix":"OPT_AVATAR","description":"integer OPT_AVATAR = 1;"}},{"OPT_EXCLUSION_VOLUME":{"body":["OPT_EXCLUSION_VOLUME${0}"],"prefix":"OPT_EXCLUSION_VOLUME","description":"integer OPT_EXCLUSION_VOLUME = 6;"}},{"OPT_LEGACY_LINKSET":{"body":["OPT_LEGACY_LINKSET${0}"],"prefix":"OPT_LEGACY_LINKSET","description":"integer OPT_LEGACY_LINKSET = 0;"}},{"OPT_MATERIAL_VOLUME":{"body":["OPT_MATERIAL_VOLUME${0}"],"prefix":"OPT_MATERIAL_VOLUME","description":"integer OPT_MATERIAL_VOLUME = 5;"}},{"OPT_OTHER":{"body":["OPT_OTHER${0}"],"prefix":"OPT_OTHER","description":"integer OPT_OTHER = -1;"}},{"OPT_STATIC_OBSTACLE":{"body":["OPT_STATIC_OBSTACLE${0}"],"prefix":"OPT_STATIC_OBSTACLE","description":"integer OPT_STATIC_OBSTACLE = 4;"}},{"OPT_WALKABLE":{"body":["OPT_WALKABLE${0}"],"prefix":"OPT_WALKABLE","description":"integer OPT_WALKABLE = 3;"}},{"PARCEL_COUNT_GROUP":{"body":["PARCEL_COUNT_GROUP${0}"],"prefix":"PARCEL_COUNT_GROUP","description":"integer PARCEL_COUNT_GROUP = 2;"}},{"PARCEL_COUNT_OTHER":{"body":["PARCEL_COUNT_OTHER${0}"],"prefix":"PARCEL_COUNT_OTHER","description":"integer PARCEL_COUNT_OTHER = 3;"}},{"PARCEL_COUNT_OWNER":{"body":["PARCEL_COUNT_OWNER${0}"],"prefix":"PARCEL_COUNT_OWNER","description":"integer PARCEL_COUNT_OWNER = 1;"}},{"PARCEL_COUNT_SELECTED":{"body":["PARCEL_COUNT_SELECTED${0}"],"prefix":"PARCEL_COUNT_SELECTED","description":"integer PARCEL_COUNT_SELECTED = 4;"}},{"PARCEL_COUNT_TEMP":{"body":["PARCEL_COUNT_TEMP${0}"],"prefix":"PARCEL_COUNT_TEMP","description":"integer PARCEL_COUNT_TEMP = 5;"}},{"PARCEL_COUNT_TOTAL":{"body":["PARCEL_COUNT_TOTAL${0}"],"prefix":"PARCEL_COUNT_TOTAL","description":"integer PARCEL_COUNT_TOTAL = 0;"}},{"PARCEL_DETAILS_AREA":{"body":["PARCEL_DETAILS_AREA${0}"],"prefix":"PARCEL_DETAILS_AREA","description":"integer PARCEL_DETAILS_AREA = 4;"}},{"PARCEL_DETAILS_DESC":{"body":["PARCEL_DETAILS_DESC${0}"],"prefix":"PARCEL_DETAILS_DESC","description":"integer PARCEL_DETAILS_DESC = 1;"}},{"PARCEL_DETAILS_GROUP":{"body":["PARCEL_DETAILS_GROUP${0}"],"prefix":"PARCEL_DETAILS_GROUP","description":"integer PARCEL_DETAILS_GROUP = 3;"}},{"PARCEL_DETAILS_ID":{"body":["PARCEL_DETAILS_ID${0}"],"prefix":"PARCEL_DETAILS_ID","description":"integer PARCEL_DETAILS_ID = 5;"}},{"PARCEL_DETAILS_NAME":{"body":["PARCEL_DETAILS_NAME${0}"],"prefix":"PARCEL_DETAILS_NAME","description":"integer PARCEL_DETAILS_NAME = 0;"}},{"PARCEL_DETAILS_OWNER":{"body":["PARCEL_DETAILS_OWNER${0}"],"prefix":"PARCEL_DETAILS_OWNER","description":"integer PARCEL_DETAILS_OWNER = 2;"}},{"PARCEL_DETAILS_SEE_AVATARS":{"body":["PARCEL_DETAILS_SEE_AVATARS${0}"],"prefix":"PARCEL_DETAILS_SEE_AVATARS","description":"integer PARCEL_DETAILS_SEE_AVATARS = 6;"}},{"PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY":{"body":["PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY${0}"],"prefix":"PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY","description":"integer PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY = 0x8000000;"}},{"PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS":{"body":["PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS${0}"],"prefix":"PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS","description":""}},{"PARCEL_FLAG_ALLOW_CREATE_OBJECTS":{"body":["PARCEL_FLAG_ALLOW_CREATE_OBJECTS${0}"],"prefix":"PARCEL_FLAG_ALLOW_CREATE_OBJECTS","description":"integer PARCEL_FLAG_ALLOW_CREATE_OBJECTS = 0x40;"}},{"PARCEL_FLAG_ALLOW_DAMAGE":{"body":["PARCEL_FLAG_ALLOW_DAMAGE${0}"],"prefix":"PARCEL_FLAG_ALLOW_DAMAGE","description":"integer PARCEL_FLAG_ALLOW_DAMAGE = 0x20;"}},{"PARCEL_FLAG_ALLOW_FLY":{"body":["PARCEL_FLAG_ALLOW_FLY${0}"],"prefix":"PARCEL_FLAG_ALLOW_FLY","description":"integer PARCEL_FLAG_ALLOW_FLY = 0x1;"}},{"PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY":{"body":["PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY${0}"],"prefix":"PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY","description":"integer PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY = 0x10000000;"}},{"PARCEL_FLAG_ALLOW_GROUP_SCRIPTS":{"body":["PARCEL_FLAG_ALLOW_GROUP_SCRIPTS${0}"],"prefix":"PARCEL_FLAG_ALLOW_GROUP_SCRIPTS","description":"integer PARCEL_FLAG_ALLOW_GROUP_SCRIPTS = 0x2000000;"}},{"PARCEL_FLAG_ALLOW_LANDMARK":{"body":["PARCEL_FLAG_ALLOW_LANDMARK${0}"],"prefix":"PARCEL_FLAG_ALLOW_LANDMARK","description":"integer PARCEL_FLAG_ALLOW_LANDMARK = 0x8;"}},{"PARCEL_FLAG_ALLOW_SCRIPTS":{"body":["PARCEL_FLAG_ALLOW_SCRIPTS${0}"],"prefix":"PARCEL_FLAG_ALLOW_SCRIPTS","description":"integer PARCEL_FLAG_ALLOW_SCRIPTS = 0x2;"}},{"PARCEL_FLAG_ALLOW_TERRAFORM":{"body":["PARCEL_FLAG_ALLOW_TERRAFORM${0}"],"prefix":"PARCEL_FLAG_ALLOW_TERRAFORM","description":"integer PARCEL_FLAG_ALLOW_TERRAFORM = 0x10;"}},{"PARCEL_FLAG_LOCAL_SOUND_ONLY":{"body":["PARCEL_FLAG_LOCAL_SOUND_ONLY${0}"],"prefix":"PARCEL_FLAG_LOCAL_SOUND_ONLY","description":"integer PARCEL_FLAG_LOCAL_SOUND_ONLY = 0x8000;"}},{"PARCEL_FLAG_RESTRICT_PUSHOBJECT":{"body":["PARCEL_FLAG_RESTRICT_PUSHOBJECT${0}"],"prefix":"PARCEL_FLAG_RESTRICT_PUSHOBJECT","description":"integer PARCEL_FLAG_RESTRICT_PUSHOBJECT = 0x200000;"}},{"PARCEL_FLAG_USE_ACCESS_GROUP":{"body":["PARCEL_FLAG_USE_ACCESS_GROUP${0}"],"prefix":"PARCEL_FLAG_USE_ACCESS_GROUP","description":"integer PARCEL_FLAG_USE_ACCESS_GROUP = 0x100;"}},{"PARCEL_FLAG_USE_ACCESS_LIST":{"body":["PARCEL_FLAG_USE_ACCESS_LIST${0}"],"prefix":"PARCEL_FLAG_USE_ACCESS_LIST","description":"integer PARCEL_FLAG_USE_ACCESS_LIST = 0x200;"}},{"PARCEL_FLAG_USE_BAN_LIST":{"body":["PARCEL_FLAG_USE_BAN_LIST${0}"],"prefix":"PARCEL_FLAG_USE_BAN_LIST","description":"integer PARCEL_FLAG_USE_BAN_LIST = 0x400;"}},{"PARCEL_FLAG_USE_LAND_PASS_LIST":{"body":["PARCEL_FLAG_USE_LAND_PASS_LIST${0}"],"prefix":"PARCEL_FLAG_USE_LAND_PASS_LIST","description":"integer PARCEL_FLAG_USE_LAND_PASS_LIST = 0x800;"}},{"PARCEL_MEDIA_COMMAND_AGENT":{"body":["PARCEL_MEDIA_COMMAND_AGENT${0}"],"prefix":"PARCEL_MEDIA_COMMAND_AGENT","description":"integer PARCEL_MEDIA_COMMAND_AGENT = 7;"}},{"PARCEL_MEDIA_COMMAND_AUTO_ALIGN":{"body":["PARCEL_MEDIA_COMMAND_AUTO_ALIGN${0}"],"prefix":"PARCEL_MEDIA_COMMAND_AUTO_ALIGN","description":"integer PARCEL_MEDIA_COMMAND_AUTO_ALIGN = 9;"}},{"PARCEL_MEDIA_COMMAND_DESC":{"body":["PARCEL_MEDIA_COMMAND_DESC${0}"],"prefix":"PARCEL_MEDIA_COMMAND_DESC","description":"integer PARCEL_MEDIA_COMMAND_DESC = 12;"}},{"PARCEL_MEDIA_COMMAND_LOOP":{"body":["PARCEL_MEDIA_COMMAND_LOOP${0}"],"prefix":"PARCEL_MEDIA_COMMAND_LOOP","description":"integer PARCEL_MEDIA_COMMAND_LOOP = 3;"}},{"PARCEL_MEDIA_COMMAND_LOOP_SET":{"body":["PARCEL_MEDIA_COMMAND_LOOP_SET${0}"],"prefix":"PARCEL_MEDIA_COMMAND_LOOP_SET","description":"integer PARCEL_MEDIA_COMMAND_LOOP_SET = 13;"}},{"PARCEL_MEDIA_COMMAND_PAUSE":{"body":["PARCEL_MEDIA_COMMAND_PAUSE${0}"],"prefix":"PARCEL_MEDIA_COMMAND_PAUSE","description":"integer PARCEL_MEDIA_COMMAND_PAUSE = 1;"}},{"PARCEL_MEDIA_COMMAND_PLAY":{"body":["PARCEL_MEDIA_COMMAND_PLAY${0}"],"prefix":"PARCEL_MEDIA_COMMAND_PLAY","description":"integer PARCEL_MEDIA_COMMAND_PLAY = 2;"}},{"PARCEL_MEDIA_COMMAND_SIZE":{"body":["PARCEL_MEDIA_COMMAND_SIZE${0}"],"prefix":"PARCEL_MEDIA_COMMAND_SIZE","description":"integer PARCEL_MEDIA_COMMAND_SIZE = 11;"}},{"PARCEL_MEDIA_COMMAND_STOP":{"body":["PARCEL_MEDIA_COMMAND_STOP${0}"],"prefix":"PARCEL_MEDIA_COMMAND_STOP","description":"integer PARCEL_MEDIA_COMMAND_STOP = 0;"}},{"PARCEL_MEDIA_COMMAND_TEXTURE":{"body":["PARCEL_MEDIA_COMMAND_TEXTURE${0}"],"prefix":"PARCEL_MEDIA_COMMAND_TEXTURE","description":"integer PARCEL_MEDIA_COMMAND_TEXTURE = 4;"}},{"PARCEL_MEDIA_COMMAND_TIME":{"body":["PARCEL_MEDIA_COMMAND_TIME${0}"],"prefix":"PARCEL_MEDIA_COMMAND_TIME","description":"integer PARCEL_MEDIA_COMMAND_TIME = 6;"}},{"PARCEL_MEDIA_COMMAND_TYPE":{"body":["PARCEL_MEDIA_COMMAND_TYPE${0}"],"prefix":"PARCEL_MEDIA_COMMAND_TYPE","description":"integer PARCEL_MEDIA_COMMAND_TYPE = 10;"}},{"PARCEL_MEDIA_COMMAND_UNLOAD":{"body":["PARCEL_MEDIA_COMMAND_UNLOAD${0}"],"prefix":"PARCEL_MEDIA_COMMAND_UNLOAD","description":"integer PARCEL_MEDIA_COMMAND_UNLOAD = 8;"}},{"PARCEL_MEDIA_COMMAND_URL":{"body":["PARCEL_MEDIA_COMMAND_URL${0}"],"prefix":"PARCEL_MEDIA_COMMAND_URL","description":"integer PARCEL_MEDIA_COMMAND_URL = 5;"}},{"PASSIVE":{"body":["PASSIVE${0}"],"prefix":"PASSIVE","description":"integer PASSIVE = 0x4;"}},{"PASS_ALWAYS":{"body":["PASS_ALWAYS${0}"],"prefix":"PASS_ALWAYS","description":"integer PASS_ALWAYS = 1;"}},{"PASS_IF_NOT_HANDLED":{"body":["PASS_IF_NOT_HANDLED${0}"],"prefix":"PASS_IF_NOT_HANDLED","description":"integer PASS_IF_NOT_HANDLED = 0;"}},{"PASS_NEVER":{"body":["PASS_NEVER${0}"],"prefix":"PASS_NEVER","description":"integer PASS_NEVER = 2;"}},{"PATROL_PAUSE_AT_WAYPOINTS":{"body":["PATROL_PAUSE_AT_WAYPOINTS${0}"],"prefix":"PATROL_PAUSE_AT_WAYPOINTS","description":"integer PATROL_PAUSE_AT_WAYPOINTS = 0;"}},{"PAYMENT_INFO_ON_FILE":{"body":["PAYMENT_INFO_ON_FILE${0}"],"prefix":"PAYMENT_INFO_ON_FILE","description":"integer PAYMENT_INFO_ON_FILE = 0x1;"}},{"PAYMENT_INFO_USED":{"body":["PAYMENT_INFO_USED${0}"],"prefix":"PAYMENT_INFO_USED","description":"integer PAYMENT_INFO_USED = 0x2;"}},{"PAY_DEFAULT":{"body":["PAY_DEFAULT${0}"],"prefix":"PAY_DEFAULT","description":"integer PAY_DEFAULT = -2;"}},{"PAY_HIDE":{"body":["PAY_HIDE${0}"],"prefix":"PAY_HIDE","description":"integer PAY_HIDE = -1;"}},{"PERMISSION_ATTACH":{"body":["PERMISSION_ATTACH${0}"],"prefix":"PERMISSION_ATTACH","description":"integer PERMISSION_ATTACH = 0x20;"}},{"PERMISSION_CHANGE_LINKS":{"body":["PERMISSION_CHANGE_LINKS${0}"],"prefix":"PERMISSION_CHANGE_LINKS","description":"integer PERMISSION_CHANGE_LINKS = 0x80;"}},{"PERMISSION_CONTROL_CAMERA":{"body":["PERMISSION_CONTROL_CAMERA${0}"],"prefix":"PERMISSION_CONTROL_CAMERA","description":"integer PERMISSION_CONTROL_CAMERA = 0x800;"}},{"PERMISSION_DEBIT":{"body":["PERMISSION_DEBIT${0}"],"prefix":"PERMISSION_DEBIT","description":"integer PERMISSION_DEBIT = 0x2;"}},{"PERMISSION_OVERRIDE_ANIMATIONS":{"body":["PERMISSION_OVERRIDE_ANIMATIONS${0}"],"prefix":"PERMISSION_OVERRIDE_ANIMATIONS","description":"integer PERMISSION_OVERRIDE_ANIMATIONS = 0x8000;"}},{"PERMISSION_RETURN_OBJECTS":{"body":["PERMISSION_RETURN_OBJECTS${0}"],"prefix":"PERMISSION_RETURN_OBJECTS","description":"integer PERMISSION_RETURN_OBJECTS = 65536;"}},{"PERMISSION_SILENT_ESTATE_MANAGEMENT":{"body":["PERMISSION_SILENT_ESTATE_MANAGEMENT${0}"],"prefix":"PERMISSION_SILENT_ESTATE_MANAGEMENT","description":"integer PERMISSION_SILENT_ESTATE_MANAGEMENT = 0x4000;"}},{"PERMISSION_TAKE_CONTROLS":{"body":["PERMISSION_TAKE_CONTROLS${0}"],"prefix":"PERMISSION_TAKE_CONTROLS","description":"integer PERMISSION_TAKE_CONTROLS = 0x4;"}},{"PERMISSION_TELEPORT":{"body":["PERMISSION_TELEPORT${0}"],"prefix":"PERMISSION_TELEPORT","description":"integer PERMISSION_TELEPORT = 0x1000;"}},{"PERMISSION_TRACK_CAMERA":{"body":["PERMISSION_TRACK_CAMERA${0}"],"prefix":"PERMISSION_TRACK_CAMERA","description":"integer PERMISSION_TRACK_CAMERA = 0x400;"}},{"PERMISSION_TRIGGER_ANIMATION":{"body":["PERMISSION_TRIGGER_ANIMATION${0}"],"prefix":"PERMISSION_TRIGGER_ANIMATION","description":"integer PERMISSION_TRIGGER_ANIMATION = 0x10;"}},{"PERM_ALL":{"body":["PERM_ALL${0}"],"prefix":"PERM_ALL","description":"integer PERM_ALL = 0x7FFFFFFF;"}},{"PERM_COPY":{"body":["PERM_COPY${0}"],"prefix":"PERM_COPY","description":"integer PERM_COPY = 0x00008000;"}},{"PERM_MODIFY":{"body":["PERM_MODIFY${0}"],"prefix":"PERM_MODIFY","description":"integer PERM_MODIFY = 0x00004000;"}},{"PERM_MOVE":{"body":["PERM_MOVE${0}"],"prefix":"PERM_MOVE","description":"integer PERM_MOVE = 0x00080000;"}},{"PERM_TRANSFER":{"body":["PERM_TRANSFER${0}"],"prefix":"PERM_TRANSFER","description":"integer PERM_TRANSFER = 0x00002000;"}},{"PI":{"body":["PI${0}"],"prefix":"PI","description":"float PI = 3.1415926535897932384626433832795f;"}},{"PING_PONG":{"body":["PING_PONG${0}"],"prefix":"PING_PONG","description":"integer PING_PONG = 0x08;"}},{"PI_BY_TWO":{"body":["PI_BY_TWO${0}"],"prefix":"PI_BY_TWO","description":"float PI_BY_TWO = 1.5707963267948966192313216916398f;"}},{"PRIM_ALLOW_UNSIT":{"body":["PRIM_ALLOW_UNSIT${0}"],"prefix":"PRIM_ALLOW_UNSIT","description":"integer PRIM_ALLOW_UNSIT = 39;"}},{"PRIM_ALPHA_MODE":{"body":["PRIM_ALPHA_MODE${0}"],"prefix":"PRIM_ALPHA_MODE","description":""}},{"PRIM_ALPHA_MODE_BLEND":{"body":["PRIM_ALPHA_MODE_BLEND${0}"],"prefix":"PRIM_ALPHA_MODE_BLEND","description":"integer PRIM_ALPHA_MODE_BLEND = 1;"}},{"PRIM_ALPHA_MODE_EMISSIVE":{"body":["PRIM_ALPHA_MODE_EMISSIVE${0}"],"prefix":"PRIM_ALPHA_MODE_EMISSIVE","description":"integer PRIM_ALPHA_MODE_EMISSIVE = 3;"}},{"PRIM_ALPHA_MODE_MASK":{"body":["PRIM_ALPHA_MODE_MASK${0}"],"prefix":"PRIM_ALPHA_MODE_MASK","description":"integer PRIM_ALPHA_MODE_MASK = 2;"}},{"PRIM_ALPHA_MODE_NONE":{"body":["PRIM_ALPHA_MODE_NONE${0}"],"prefix":"PRIM_ALPHA_MODE_NONE","description":"integer PRIM_ALPHA_MODE_NONE = 0;"}},{"PRIM_BUMP_BARK":{"body":["PRIM_BUMP_BARK${0}"],"prefix":"PRIM_BUMP_BARK","description":"integer PRIM_BUMP_BARK = 4;"}},{"PRIM_BUMP_BLOBS":{"body":["PRIM_BUMP_BLOBS${0}"],"prefix":"PRIM_BUMP_BLOBS","description":"integer PRIM_BUMP_BLOBS = 12;"}},{"PRIM_BUMP_BRICKS":{"body":["PRIM_BUMP_BRICKS${0}"],"prefix":"PRIM_BUMP_BRICKS","description":"integer PRIM_BUMP_BRICKS = 5;"}},{"PRIM_BUMP_BRIGHT":{"body":["PRIM_BUMP_BRIGHT${0}"],"prefix":"PRIM_BUMP_BRIGHT","description":"integer PRIM_BUMP_BRIGHT = 1;"}},{"PRIM_BUMP_CHECKER":{"body":["PRIM_BUMP_CHECKER${0}"],"prefix":"PRIM_BUMP_CHECKER","description":"integer PRIM_BUMP_CHECKER = 6;"}},{"PRIM_BUMP_CONCRETE":{"body":["PRIM_BUMP_CONCRETE${0}"],"prefix":"PRIM_BUMP_CONCRETE","description":"integer PRIM_BUMP_CONCRETE = 7;"}},{"PRIM_BUMP_DARK":{"body":["PRIM_BUMP_DARK${0}"],"prefix":"PRIM_BUMP_DARK","description":"integer PRIM_BUMP_DARK = 2;"}},{"PRIM_BUMP_DISKS":{"body":["PRIM_BUMP_DISKS${0}"],"prefix":"PRIM_BUMP_DISKS","description":"integer PRIM_BUMP_DISKS = 10;"}},{"PRIM_BUMP_GRAVEL":{"body":["PRIM_BUMP_GRAVEL${0}"],"prefix":"PRIM_BUMP_GRAVEL","description":"integer PRIM_BUMP_GRAVEL = 11;"}},{"PRIM_BUMP_LARGETILE":{"body":["PRIM_BUMP_LARGETILE${0}"],"prefix":"PRIM_BUMP_LARGETILE","description":"integer PRIM_BUMP_LARGETILE = 14;"}},{"PRIM_BUMP_NONE":{"body":["PRIM_BUMP_NONE${0}"],"prefix":"PRIM_BUMP_NONE","description":"integer PRIM_BUMP_NONE = 0;"}},{"PRIM_BUMP_SHINY":{"body":["PRIM_BUMP_SHINY${0}"],"prefix":"PRIM_BUMP_SHINY","description":"integer PRIM_BUMP_SHINY = 19;"}},{"PRIM_BUMP_SIDING":{"body":["PRIM_BUMP_SIDING${0}"],"prefix":"PRIM_BUMP_SIDING","description":"integer PRIM_BUMP_SIDING = 13;"}},{"PRIM_BUMP_STONE":{"body":["PRIM_BUMP_STONE${0}"],"prefix":"PRIM_BUMP_STONE","description":"integer PRIM_BUMP_STONE = 9;"}},{"PRIM_BUMP_STUCCO":{"body":["PRIM_BUMP_STUCCO${0}"],"prefix":"PRIM_BUMP_STUCCO","description":"integer PRIM_BUMP_STUCCO = 15;"}},{"PRIM_BUMP_SUCTION":{"body":["PRIM_BUMP_SUCTION${0}"],"prefix":"PRIM_BUMP_SUCTION","description":"integer PRIM_BUMP_SUCTION = 16;"}},{"PRIM_BUMP_TILE":{"body":["PRIM_BUMP_TILE${0}"],"prefix":"PRIM_BUMP_TILE","description":"integer PRIM_BUMP_TILE = 8;"}},{"PRIM_BUMP_WEAVE":{"body":["PRIM_BUMP_WEAVE${0}"],"prefix":"PRIM_BUMP_WEAVE","description":"integer PRIM_BUMP_WEAVE = 17;"}},{"PRIM_BUMP_WOOD":{"body":["PRIM_BUMP_WOOD${0}"],"prefix":"PRIM_BUMP_WOOD","description":"integer PRIM_BUMP_WOOD = 3;"}},{"PRIM_COLOR":{"body":["PRIM_COLOR${0}"],"prefix":"PRIM_COLOR","description":"integer PRIM_COLOR = 18;"}},{"PRIM_DESC":{"body":["PRIM_DESC${0}"],"prefix":"PRIM_DESC","description":"integer PRIM_DESC = 28;"}},{"PRIM_FLEXIBLE":{"body":["PRIM_FLEXIBLE${0}"],"prefix":"PRIM_FLEXIBLE","description":"integer PRIM_FLEXIBLE = 21;"}},{"PRIM_FULLBRIGHT":{"body":["PRIM_FULLBRIGHT${0}"],"prefix":"PRIM_FULLBRIGHT","description":"integer PRIM_FULLBRIGHT = 20;"}},{"PRIM_GLOW":{"body":["PRIM_GLOW${0}"],"prefix":"PRIM_GLOW","description":"integer PRIM_GLOW = 25;"}},{"PRIM_HOLE_CIRCLE":{"body":["PRIM_HOLE_CIRCLE${0}"],"prefix":"PRIM_HOLE_CIRCLE","description":"integer PRIM_HOLE_CIRCLE = 0x10;"}},{"PRIM_HOLE_DEFAULT":{"body":["PRIM_HOLE_DEFAULT${0}"],"prefix":"PRIM_HOLE_DEFAULT","description":"integer PRIM_HOLE_DEFAULT = 0x00;"}},{"PRIM_HOLE_SQUARE":{"body":["PRIM_HOLE_SQUARE${0}"],"prefix":"PRIM_HOLE_SQUARE","description":"integer PRIM_HOLE_SQUARE = 0x20;"}},{"PRIM_HOLE_TRIANGLE":{"body":["PRIM_HOLE_TRIANGLE${0}"],"prefix":"PRIM_HOLE_TRIANGLE","description":"integer PRIM_HOLE_TRIANGLE = 0x30;"}},{"PRIM_LINK_TARGET":{"body":["PRIM_LINK_TARGET${0}"],"prefix":"PRIM_LINK_TARGET","description":"integer PRIM_LINK_TARGET = 34;"}},{"PRIM_MATERIAL":{"body":["PRIM_MATERIAL${0}"],"prefix":"PRIM_MATERIAL","description":"integer PRIM_MATERIAL = 2;"}},{"PRIM_MATERIAL_FLESH":{"body":["PRIM_MATERIAL_FLESH${0}"],"prefix":"PRIM_MATERIAL_FLESH","description":"integer PRIM_MATERIAL_FLESH = 4;"}},{"PRIM_MATERIAL_GLASS":{"body":["PRIM_MATERIAL_GLASS${0}"],"prefix":"PRIM_MATERIAL_GLASS","description":"integer PRIM_MATERIAL_GLASS = 2;"}},{"PRIM_MATERIAL_LIGHT":{"body":["PRIM_MATERIAL_LIGHT${0}"],"prefix":"PRIM_MATERIAL_LIGHT","description":"integer PRIM_MATERIAL_LIGHT = 7;"}},{"PRIM_MATERIAL_METAL":{"body":["PRIM_MATERIAL_METAL${0}"],"prefix":"PRIM_MATERIAL_METAL","description":"integer PRIM_MATERIAL_METAL = 1;"}},{"PRIM_MATERIAL_PLASTIC":{"body":["PRIM_MATERIAL_PLASTIC${0}"],"prefix":"PRIM_MATERIAL_PLASTIC","description":"integer PRIM_MATERIAL_PLASTIC = 5;"}},{"PRIM_MATERIAL_RUBBER":{"body":["PRIM_MATERIAL_RUBBER${0}"],"prefix":"PRIM_MATERIAL_RUBBER","description":"integer PRIM_MATERIAL_RUBBER = 6;"}},{"PRIM_MATERIAL_STONE":{"body":["PRIM_MATERIAL_STONE${0}"],"prefix":"PRIM_MATERIAL_STONE","description":"integer PRIM_MATERIAL_STONE = 0;"}},{"PRIM_MATERIAL_WOOD":{"body":["PRIM_MATERIAL_WOOD${0}"],"prefix":"PRIM_MATERIAL_WOOD","description":"integer PRIM_MATERIAL_WOOD = 3;"}},{"PRIM_MEDIA_ALT_IMAGE_ENABLE":{"body":["PRIM_MEDIA_ALT_IMAGE_ENABLE${0}"],"prefix":"PRIM_MEDIA_ALT_IMAGE_ENABLE","description":"integer PRIM_MEDIA_ALT_IMAGE_ENABLE = 0;"}},{"PRIM_MEDIA_AUTO_LOOP":{"body":["PRIM_MEDIA_AUTO_LOOP${0}"],"prefix":"PRIM_MEDIA_AUTO_LOOP","description":"integer PRIM_MEDIA_AUTO_LOOP = 4;"}},{"PRIM_MEDIA_AUTO_PLAY":{"body":["PRIM_MEDIA_AUTO_PLAY${0}"],"prefix":"PRIM_MEDIA_AUTO_PLAY","description":"integer PRIM_MEDIA_AUTO_PLAY = 5;"}},{"PRIM_MEDIA_AUTO_SCALE":{"body":["PRIM_MEDIA_AUTO_SCALE${0}"],"prefix":"PRIM_MEDIA_AUTO_SCALE","description":"integer PRIM_MEDIA_AUTO_SCALE = 6;"}},{"PRIM_MEDIA_AUTO_ZOOM":{"body":["PRIM_MEDIA_AUTO_ZOOM${0}"],"prefix":"PRIM_MEDIA_AUTO_ZOOM","description":"integer PRIM_MEDIA_AUTO_ZOOM = 7;"}},{"PRIM_MEDIA_CURRENT_URL":{"body":["PRIM_MEDIA_CURRENT_URL${0}"],"prefix":"PRIM_MEDIA_CURRENT_URL","description":"integer PRIM_MEDIA_CURRENT_URL = 2;"}},{"PRIM_MEDIA_FIRST_CLICK_INTERACT":{"body":["PRIM_MEDIA_FIRST_CLICK_INTERACT${0}"],"prefix":"PRIM_MEDIA_FIRST_CLICK_INTERACT","description":"integer PRIM_MEDIA_FIRST_CLICK_INTERACT = 8;"}},{"PRIM_MEDIA_HEIGHT_PIXELS":{"body":["PRIM_MEDIA_HEIGHT_PIXELS${0}"],"prefix":"PRIM_MEDIA_HEIGHT_PIXELS","description":"integer PRIM_MEDIA_HEIGHT_PIXELS = 10;"}},{"PRIM_MEDIA_HOME_URL":{"body":["PRIM_MEDIA_HOME_URL${0}"],"prefix":"PRIM_MEDIA_HOME_URL","description":"integer PRIM_MEDIA_HOME_URL = 3;"}},{"PRIM_MEDIA_PERMS_CONTROL":{"body":["PRIM_MEDIA_PERMS_CONTROL${0}"],"prefix":"PRIM_MEDIA_PERMS_CONTROL","description":"integer PRIM_MEDIA_PERMS_CONTROL = 14;"}},{"PRIM_MEDIA_PERMS_INTERACT":{"body":["PRIM_MEDIA_PERMS_INTERACT${0}"],"prefix":"PRIM_MEDIA_PERMS_INTERACT","description":"integer PRIM_MEDIA_PERMS_INTERACT = 13;"}},{"PRIM_MEDIA_PERM_ANYONE":{"body":["PRIM_MEDIA_PERM_ANYONE${0}"],"prefix":"PRIM_MEDIA_PERM_ANYONE","description":"integer PRIM_MEDIA_PERM_ANYONE = 0x4;"}},{"PRIM_MEDIA_PERM_GROUP":{"body":["PRIM_MEDIA_PERM_GROUP${0}"],"prefix":"PRIM_MEDIA_PERM_GROUP","description":"integer PRIM_MEDIA_PERM_GROUP = 0x2;"}},{"PRIM_MEDIA_PERM_NONE":{"body":["PRIM_MEDIA_PERM_NONE${0}"],"prefix":"PRIM_MEDIA_PERM_NONE","description":"integer PRIM_MEDIA_PERM_NONE = 0x0;"}},{"PRIM_MEDIA_PERM_OWNER":{"body":["PRIM_MEDIA_PERM_OWNER${0}"],"prefix":"PRIM_MEDIA_PERM_OWNER","description":"integer PRIM_MEDIA_PERM_OWNER = 0x1;"}},{"PRIM_MEDIA_WHITELIST":{"body":["PRIM_MEDIA_WHITELIST${0}"],"prefix":"PRIM_MEDIA_WHITELIST","description":"integer PRIM_MEDIA_WHITELIST = 12;"}},{"PRIM_MEDIA_WHITELIST_ENABLE":{"body":["PRIM_MEDIA_WHITELIST_ENABLE${0}"],"prefix":"PRIM_MEDIA_WHITELIST_ENABLE","description":"integer PRIM_MEDIA_WHITELIST_ENABLE = 11;"}},{"PRIM_MEDIA_WIDTH_PIXELS":{"body":["PRIM_MEDIA_WIDTH_PIXELS${0}"],"prefix":"PRIM_MEDIA_WIDTH_PIXELS","description":"integer PRIM_MEDIA_WIDTH_PIXELS = 9;"}},{"PRIM_NAME":{"body":["PRIM_NAME${0}"],"prefix":"PRIM_NAME","description":"integer PRIM_NAME = 27;"}},{"PRIM_NORMAL":{"body":["PRIM_NORMAL${0}"],"prefix":"PRIM_NORMAL","description":"integer PRIM_NORMAL = 37;"}},{"PRIM_OMEGA":{"body":["PRIM_OMEGA${0}"],"prefix":"PRIM_OMEGA","description":"integer PRIM_OMEGA = 32;"}},{"PRIM_PHANTOM":{"body":["PRIM_PHANTOM${0}"],"prefix":"PRIM_PHANTOM","description":"integer PRIM_PHANTOM = 5;"}},{"PRIM_PHYSICS":{"body":["PRIM_PHYSICS${0}"],"prefix":"PRIM_PHYSICS","description":"integer PRIM_PHYSICS = 3;"}},{"PRIM_PHYSICS_SHAPE_CONVEX":{"body":["PRIM_PHYSICS_SHAPE_CONVEX${0}"],"prefix":"PRIM_PHYSICS_SHAPE_CONVEX","description":"integer PRIM_PHYSICS_SHAPE_CONVEX = 2;"}},{"PRIM_PHYSICS_SHAPE_NONE":{"body":["PRIM_PHYSICS_SHAPE_NONE${0}"],"prefix":"PRIM_PHYSICS_SHAPE_NONE","description":"integer PRIM_PHYSICS_SHAPE_NONE = 1;"}},{"PRIM_PHYSICS_SHAPE_PRIM":{"body":["PRIM_PHYSICS_SHAPE_PRIM${0}"],"prefix":"PRIM_PHYSICS_SHAPE_PRIM","description":"integer PRIM_PHYSICS_SHAPE_PRIM = 0;"}},{"PRIM_PHYSICS_SHAPE_TYPE":{"body":["PRIM_PHYSICS_SHAPE_TYPE${0}"],"prefix":"PRIM_PHYSICS_SHAPE_TYPE","description":"integer PRIM_PHYSICS_SHAPE_TYPE = 30;"}},{"PRIM_POINT_LIGHT":{"body":["PRIM_POINT_LIGHT${0}"],"prefix":"PRIM_POINT_LIGHT","description":"integer PRIM_POINT_LIGHT = 23;"}},{"PRIM_POSITION":{"body":["PRIM_POSITION${0}"],"prefix":"PRIM_POSITION","description":"integer PRIM_POSITION = 6;"}},{"PRIM_POS_LOCAL":{"body":["PRIM_POS_LOCAL${0}"],"prefix":"PRIM_POS_LOCAL","description":"integer PRIM_POS_LOCAL = 33;"}},{"PRIM_ROTATION":{"body":["PRIM_ROTATION${0}"],"prefix":"PRIM_ROTATION","description":"integer PRIM_ROTATION = 8;"}},{"PRIM_ROT_LOCAL":{"body":["PRIM_ROT_LOCAL${0}"],"prefix":"PRIM_ROT_LOCAL","description":"integer PRIM_ROT_LOCAL = 29;"}},{"PRIM_SCRIPTED_SIT_ONLY":{"body":["PRIM_SCRIPTED_SIT_ONLY${0}"],"prefix":"PRIM_SCRIPTED_SIT_ONLY","description":"integer PRIM_SCRIPTED_SIT_ONLY = 40;"}},{"PRIM_SCULPT_FLAG_INVERT":{"body":["PRIM_SCULPT_FLAG_INVERT${0}"],"prefix":"PRIM_SCULPT_FLAG_INVERT","description":"integer PRIM_SCULPT_FLAG_INVERT = 0x40;"}},{"PRIM_SCULPT_FLAG_MIRROR":{"body":["PRIM_SCULPT_FLAG_MIRROR${0}"],"prefix":"PRIM_SCULPT_FLAG_MIRROR","description":"integer PRIM_SCULPT_FLAG_MIRROR = 0x80;"}},{"PRIM_SCULPT_TYPE_CYLINDER":{"body":["PRIM_SCULPT_TYPE_CYLINDER${0}"],"prefix":"PRIM_SCULPT_TYPE_CYLINDER","description":"integer PRIM_SCULPT_TYPE_CYLINDER = 4;"}},{"PRIM_SCULPT_TYPE_MASK":{"body":["PRIM_SCULPT_TYPE_MASK${0}"],"prefix":"PRIM_SCULPT_TYPE_MASK","description":"integer PRIM_SCULPT_TYPE_MASK = 7;"}},{"PRIM_SCULPT_TYPE_PLANE":{"body":["PRIM_SCULPT_TYPE_PLANE${0}"],"prefix":"PRIM_SCULPT_TYPE_PLANE","description":"integer PRIM_SCULPT_TYPE_PLANE = 3;"}},{"PRIM_SCULPT_TYPE_SPHERE":{"body":["PRIM_SCULPT_TYPE_SPHERE${0}"],"prefix":"PRIM_SCULPT_TYPE_SPHERE","description":"integer PRIM_SCULPT_TYPE_SPHERE = 1;"}},{"PRIM_SCULPT_TYPE_TORUS":{"body":["PRIM_SCULPT_TYPE_TORUS${0}"],"prefix":"PRIM_SCULPT_TYPE_TORUS","description":"integer PRIM_SCULPT_TYPE_TORUS = 2;"}},{"PRIM_SHINY_HIGH":{"body":["PRIM_SHINY_HIGH${0}"],"prefix":"PRIM_SHINY_HIGH","description":"integer PRIM_SHINY_HIGH = 3;"}},{"PRIM_SHINY_LOW":{"body":["PRIM_SHINY_LOW${0}"],"prefix":"PRIM_SHINY_LOW","description":"integer PRIM_SHINY_LOW = 1;"}},{"PRIM_SHINY_MEDIUM":{"body":["PRIM_SHINY_MEDIUM${0}"],"prefix":"PRIM_SHINY_MEDIUM","description":"integer PRIM_SHINY_MEDIUM = 2;"}},{"PRIM_SHINY_NONE":{"body":["PRIM_SHINY_NONE${0}"],"prefix":"PRIM_SHINY_NONE","description":"integer PRIM_SHINY_NONE = 0;"}},{"PRIM_SIT_TARGET":{"body":["PRIM_SIT_TARGET${0}"],"prefix":"PRIM_SIT_TARGET","description":"integer PRIM_SIT_TARGET = 41;"}},{"PRIM_SIZE":{"body":["PRIM_SIZE${0}"],"prefix":"PRIM_SIZE","description":"integer PRIM_SIZE = 7;"}},{"PRIM_SLICE":{"body":["PRIM_SLICE${0}"],"prefix":"PRIM_SLICE","description":"integer PRIM_SLICE = 35;"}},{"PRIM_SPECULAR":{"body":["PRIM_SPECULAR${0}"],"prefix":"PRIM_SPECULAR","description":"integer PRIM_SPECULAR = 36;"}},{"PRIM_TEMP_ON_REZ":{"body":["PRIM_TEMP_ON_REZ${0}"],"prefix":"PRIM_TEMP_ON_REZ","description":"integer PRIM_TEMP_ON_REZ = 4;"}},{"PRIM_TEXGEN":{"body":["PRIM_TEXGEN${0}"],"prefix":"PRIM_TEXGEN","description":"integer PRIM_TEXGEN = 22;"}},{"PRIM_TEXGEN_DEFAULT":{"body":["PRIM_TEXGEN_DEFAULT${0}"],"prefix":"PRIM_TEXGEN_DEFAULT","description":"integer PRIM_TEXGEN_DEFAULT = 0;"}},{"PRIM_TEXGEN_PLANAR":{"body":["PRIM_TEXGEN_PLANAR${0}"],"prefix":"PRIM_TEXGEN_PLANAR","description":"integer PRIM_TEXGEN_PLANAR = 1;"}},{"PRIM_TEXT":{"body":["PRIM_TEXT${0}"],"prefix":"PRIM_TEXT","description":"integer PRIM_TEXT = 26;"}},{"PRIM_TEXTURE":{"body":["PRIM_TEXTURE${0}"],"prefix":"PRIM_TEXTURE","description":"integer PRIM_TEXTURE = 17;"}},{"PRIM_TYPE":{"body":["PRIM_TYPE${0}"],"prefix":"PRIM_TYPE","description":"integer PRIM_TYPE = 9;"}},{"PRIM_TYPE_BOX":{"body":["PRIM_TYPE_BOX${0}"],"prefix":"PRIM_TYPE_BOX","description":"integer PRIM_TYPE_BOX = 0;"}},{"PRIM_TYPE_CYLINDER":{"body":["PRIM_TYPE_CYLINDER${0}"],"prefix":"PRIM_TYPE_CYLINDER","description":"integer PRIM_TYPE_CYLINDER = 1;"}},{"PRIM_TYPE_PRISM":{"body":["PRIM_TYPE_PRISM${0}"],"prefix":"PRIM_TYPE_PRISM","description":"integer PRIM_TYPE_PRISM = 2;"}},{"PRIM_TYPE_RING":{"body":["PRIM_TYPE_RING${0}"],"prefix":"PRIM_TYPE_RING","description":"integer PRIM_TYPE_RING = 6;"}},{"PRIM_TYPE_SCULPT":{"body":["PRIM_TYPE_SCULPT${0}"],"prefix":"PRIM_TYPE_SCULPT","description":"integer PRIM_TYPE_SCULPT = 7;"}},{"PRIM_TYPE_SPHERE":{"body":["PRIM_TYPE_SPHERE${0}"],"prefix":"PRIM_TYPE_SPHERE","description":"integer PRIM_TYPE_SPHERE = 3;"}},{"PRIM_TYPE_TORUS":{"body":["PRIM_TYPE_TORUS${0}"],"prefix":"PRIM_TYPE_TORUS","description":"integer PRIM_TYPE_TORUS = 4;"}},{"PRIM_TYPE_TUBE":{"body":["PRIM_TYPE_TUBE${0}"],"prefix":"PRIM_TYPE_TUBE","description":"integer PRIM_TYPE_TUBE = 5;"}},{"PROFILE_NONE":{"body":["PROFILE_NONE${0}"],"prefix":"PROFILE_NONE","description":"integer PROFILE_NONE = 0;"}},{"PROFILE_SCRIPT_MEMORY":{"body":["PROFILE_SCRIPT_MEMORY${0}"],"prefix":"PROFILE_SCRIPT_MEMORY","description":"integer PROFILE_SCRIPT_MEMORY = 1;"}},{"PUBLIC_CHANNEL":{"body":["PUBLIC_CHANNEL${0}"],"prefix":"PUBLIC_CHANNEL","description":"integer PUBLIC_CHANNEL = 0x0;"}},{"RAD_TO_DEG":{"body":["RAD_TO_DEG${0}"],"prefix":"RAD_TO_DEG","description":"float RAD_TO_DEG = 57.295779513082320876798154814105f;"}},{"RCERR_CAST_TIME_EXCEEDED":{"body":["RCERR_CAST_TIME_EXCEEDED${0}"],"prefix":"RCERR_CAST_TIME_EXCEEDED","description":"integer RCERR_CAST_TIME_EXCEEDED = -3;"}},{"RCERR_SIM_PERF_LOW":{"body":["RCERR_SIM_PERF_LOW${0}"],"prefix":"RCERR_SIM_PERF_LOW","description":"integer RCERR_SIM_PERF_LOW = -2;"}},{"RCERR_UNKNOWN":{"body":["RCERR_UNKNOWN${0}"],"prefix":"RCERR_UNKNOWN","description":"integer RCERR_UNKNOWN = -1;"}},{"RC_DATA_FLAGS":{"body":["RC_DATA_FLAGS${0}"],"prefix":"RC_DATA_FLAGS","description":"integer RC_DATA_FLAGS = 2;"}},{"RC_DETECT_PHANTOM":{"body":["RC_DETECT_PHANTOM${0}"],"prefix":"RC_DETECT_PHANTOM","description":"integer RC_DETECT_PHANTOM = 1;"}},{"RC_GET_LINK_NUM":{"body":["RC_GET_LINK_NUM${0}"],"prefix":"RC_GET_LINK_NUM","description":"integer RC_GET_LINK_NUM = 4;"}},{"RC_GET_NORMAL":{"body":["RC_GET_NORMAL${0}"],"prefix":"RC_GET_NORMAL","description":"integer RC_GET_NORMAL = 1;"}},{"RC_GET_ROOT_KEY":{"body":["RC_GET_ROOT_KEY${0}"],"prefix":"RC_GET_ROOT_KEY","description":"integer RC_GET_ROOT_KEY = 2;"}},{"RC_MAX_HITS":{"body":["RC_MAX_HITS${0}"],"prefix":"RC_MAX_HITS","description":"integer RC_MAX_HITS = 3;"}},{"RC_REJECT_AGENTS":{"body":["RC_REJECT_AGENTS${0}"],"prefix":"RC_REJECT_AGENTS","description":"integer RC_REJECT_AGENTS = 1;"}},{"RC_REJECT_LAND":{"body":["RC_REJECT_LAND${0}"],"prefix":"RC_REJECT_LAND","description":"integer RC_REJECT_LAND = 8;"}},{"RC_REJECT_NONPHYSICAL":{"body":["RC_REJECT_NONPHYSICAL${0}"],"prefix":"RC_REJECT_NONPHYSICAL","description":"integer RC_REJECT_NONPHYSICAL = 4;"}},{"RC_REJECT_PHYSICAL":{"body":["RC_REJECT_PHYSICAL${0}"],"prefix":"RC_REJECT_PHYSICAL","description":"integer RC_REJECT_PHYSICAL = 2;"}},{"RC_REJECT_TYPES":{"body":["RC_REJECT_TYPES${0}"],"prefix":"RC_REJECT_TYPES","description":"integer RC_REJECT_TYPES = 0;"}},{"REGION_FLAG_ALLOW_DAMAGE":{"body":["REGION_FLAG_ALLOW_DAMAGE${0}"],"prefix":"REGION_FLAG_ALLOW_DAMAGE","description":"integer REGION_FLAG_ALLOW_DAMAGE = 0x00000001;"}},{"REGION_FLAG_ALLOW_DIRECT_TELEPORT":{"body":["REGION_FLAG_ALLOW_DIRECT_TELEPORT${0}"],"prefix":"REGION_FLAG_ALLOW_DIRECT_TELEPORT","description":"integer REGION_FLAG_ALLOW_DIRECT_TELEPORT = 0x00100000;"}},{"REGION_FLAG_BLOCK_FLY":{"body":["REGION_FLAG_BLOCK_FLY${0}"],"prefix":"REGION_FLAG_BLOCK_FLY","description":"integer REGION_FLAG_BLOCK_FLY = 0x00080000;"}},{"REGION_FLAG_BLOCK_TERRAFORM":{"body":["REGION_FLAG_BLOCK_TERRAFORM${0}"],"prefix":"REGION_FLAG_BLOCK_TERRAFORM","description":"integer REGION_FLAG_BLOCK_TERRAFORM = 0x00000040;"}},{"REGION_FLAG_DISABLE_COLLISIONS":{"body":["REGION_FLAG_DISABLE_COLLISIONS${0}"],"prefix":"REGION_FLAG_DISABLE_COLLISIONS","description":"integer REGION_FLAG_DISABLE_COLLISIONS = 0x00001000;"}},{"REGION_FLAG_DISABLE_PHYSICS":{"body":["REGION_FLAG_DISABLE_PHYSICS${0}"],"prefix":"REGION_FLAG_DISABLE_PHYSICS","description":"integer REGION_FLAG_DISABLE_PHYSICS = 0x00004000;"}},{"REGION_FLAG_FIXED_SUN":{"body":["REGION_FLAG_FIXED_SUN${0}"],"prefix":"REGION_FLAG_FIXED_SUN","description":"integer REGION_FLAG_FIXED_SUN = 0x00000010;"}},{"REGION_FLAG_RESTRICT_PUSHOBJECT":{"body":["REGION_FLAG_RESTRICT_PUSHOBJECT${0}"],"prefix":"REGION_FLAG_RESTRICT_PUSHOBJECT","description":"integer REGION_FLAG_RESTRICT_PUSHOBJECT = 0x00400000;"}},{"REGION_FLAG_SANDBOX":{"body":["REGION_FLAG_SANDBOX${0}"],"prefix":"REGION_FLAG_SANDBOX","description":"integer REGION_FLAG_SANDBOX = 0x00000100;"}},{"REMOTE_DATA_CHANNEL":{"body":["REMOTE_DATA_CHANNEL${0}"],"prefix":"REMOTE_DATA_CHANNEL","description":"integer REMOTE_DATA_CHANNEL = 1;"}},{"REMOTE_DATA_REPLY":{"body":["REMOTE_DATA_REPLY${0}"],"prefix":"REMOTE_DATA_REPLY","description":"integer REMOTE_DATA_REPLY = 3;"}},{"REMOTE_DATA_REQUEST":{"body":["REMOTE_DATA_REQUEST${0}"],"prefix":"REMOTE_DATA_REQUEST","description":"integer REMOTE_DATA_REQUEST = 2;"}},{"REVERSE":{"body":["REVERSE${0}"],"prefix":"REVERSE","description":"integer REVERSE = 0x04;"}},{"ROTATE":{"body":["ROTATE${0}"],"prefix":"ROTATE","description":"integer ROTATE = 0x20;"}},{"SCALE":{"body":["SCALE${0}"],"prefix":"SCALE","description":"integer SCALE = 0x40;"}},{"SCRIPTED":{"body":["SCRIPTED${0}"],"prefix":"SCRIPTED","description":"integer SCRIPTED = 0x8;"}},{"SIM_STAT_PCT_CHARS_STEPPED":{"body":["SIM_STAT_PCT_CHARS_STEPPED${0}"],"prefix":"SIM_STAT_PCT_CHARS_STEPPED","description":"integer SIM_STAT_PCT_CHARS_STEPPED = 0;"}},{"SMOOTH":{"body":["SMOOTH${0}"],"prefix":"SMOOTH","description":"integer SMOOTH = 0x010;"}},{"SQRT2":{"body":["SQRT2${0}"],"prefix":"SQRT2","description":"float SQRT2 = 1.4142135623730950488016887242097f;"}},{"STATUS_BLOCK_GRAB":{"body":["STATUS_BLOCK_GRAB${0}"],"prefix":"STATUS_BLOCK_GRAB","description":"integer STATUS_BLOCK_GRAB = 0x40;"}},{"STATUS_BLOCK_GRAB_OBJECT":{"body":["STATUS_BLOCK_GRAB_OBJECT${0}"],"prefix":"STATUS_BLOCK_GRAB_OBJECT","description":"integer STATUS_BLOCK_GRAB_OBJECT = 0x400;"}},{"STATUS_BOUNDS_ERROR":{"body":["STATUS_BOUNDS_ERROR${0}"],"prefix":"STATUS_BOUNDS_ERROR","description":"integer STATUS_BOUNDS_ERROR = 1002;"}},{"STATUS_CAST_SHADOWS":{"body":["STATUS_CAST_SHADOWS${0}"],"prefix":"STATUS_CAST_SHADOWS","description":"integer STATUS_CAST_SHADOWS = 0x200;"}},{"STATUS_DIE_AT_EDGE":{"body":["STATUS_DIE_AT_EDGE${0}"],"prefix":"STATUS_DIE_AT_EDGE","description":"integer STATUS_DIE_AT_EDGE = 0x80;"}},{"STATUS_INTERNAL_ERROR":{"body":["STATUS_INTERNAL_ERROR${0}"],"prefix":"STATUS_INTERNAL_ERROR","description":"integer STATUS_INTERNAL_ERROR = 1999;"}},{"STATUS_MALFORMED_PARAMS":{"body":["STATUS_MALFORMED_PARAMS${0}"],"prefix":"STATUS_MALFORMED_PARAMS","description":"integer STATUS_MALFORMED_PARAMS = 1000;"}},{"STATUS_NOT_FOUND":{"body":["STATUS_NOT_FOUND${0}"],"prefix":"STATUS_NOT_FOUND","description":"integer STATUS_NOT_FOUND = 1003;"}},{"STATUS_NOT_SUPPORTED":{"body":["STATUS_NOT_SUPPORTED${0}"],"prefix":"STATUS_NOT_SUPPORTED","description":"integer STATUS_NOT_SUPPORTED = 1004;"}},{"STATUS_OK":{"body":["STATUS_OK${0}"],"prefix":"STATUS_OK","description":"integer STATUS_OK = 0;"}},{"STATUS_PHANTOM":{"body":["STATUS_PHANTOM${0}"],"prefix":"STATUS_PHANTOM","description":"integer STATUS_PHANTOM = 0x10;"}},{"STATUS_PHYSICS":{"body":["STATUS_PHYSICS${0}"],"prefix":"STATUS_PHYSICS","description":""}},{"STATUS_RETURN_AT_EDGE":{"body":["STATUS_RETURN_AT_EDGE${0}"],"prefix":"STATUS_RETURN_AT_EDGE","description":"integer STATUS_RETURN_AT_EDGE = 0x100;"}},{"STATUS_ROTATE_X":{"body":["STATUS_ROTATE_X${0}"],"prefix":"STATUS_ROTATE_X","description":"integer STATUS_ROTATE_X = 0x2;"}},{"STATUS_ROTATE_Y":{"body":["STATUS_ROTATE_Y${0}"],"prefix":"STATUS_ROTATE_Y","description":"integer STATUS_ROTATE_Y = 0x4;"}},{"STATUS_ROTATE_Z":{"body":["STATUS_ROTATE_Z${0}"],"prefix":"STATUS_ROTATE_Z","description":"integer STATUS_ROTATE_Z = 0x8;"}},{"STATUS_SANDBOX":{"body":["STATUS_SANDBOX${0}"],"prefix":"STATUS_SANDBOX","description":"integer STATUS_SANDBOX = 0x20;"}},{"STATUS_TYPE_MISMATCH":{"body":["STATUS_TYPE_MISMATCH${0}"],"prefix":"STATUS_TYPE_MISMATCH","description":"integer STATUS_TYPE_MISMATCH = 1001;"}},{"STATUS_WHITELIST_FAILED":{"body":["STATUS_WHITELIST_FAILED${0}"],"prefix":"STATUS_WHITELIST_FAILED","description":"integer STATUS_WHITELIST_FAILED = 2001;"}},{"STRING_TRIM":{"body":["STRING_TRIM${0}"],"prefix":"STRING_TRIM","description":"integer STRING_TRIM = 0x03;"}},{"STRING_TRIM_HEAD":{"body":["STRING_TRIM_HEAD${0}"],"prefix":"STRING_TRIM_HEAD","description":"integer STRING_TRIM_HEAD = 0x01;"}},{"STRING_TRIM_TAIL":{"body":["STRING_TRIM_TAIL${0}"],"prefix":"STRING_TRIM_TAIL","description":"integer STRING_TRIM_TAIL = 0x02;"}},{"TEXTURE_DEFAULT":{"body":["TEXTURE_DEFAULT${0}"],"prefix":"TEXTURE_DEFAULT","description":"string TEXTURE_PLYWOOD = \"89556747-24cb-43ed-920b-47caed15465f\";"}},{"TEXTURE_BLANK":{"body":["TEXTURE_BLANK${0}"],"prefix":"TEXTURE_BLANK","description":"string TEXTURE_BLANK = \"5748decc-f629-461c-9a36-a35a221fe21f\";"}},{"TEXTURE_MEDIA":{"body":["TEXTURE_MEDIA${0}"],"prefix":"TEXTURE_MEDIA","description":"string TEXTURE_MEDIA = \"8b5fec65-8d8d-9dc5-cda8-8fdf2716e361\";"}},{"TEXTURE_PLYWOOD":{"body":["TEXTURE_PLYWOOD${0}"],"prefix":"TEXTURE_PLYWOOD","description":"string TEXTURE_PLYWOOD = \"89556747-24cb-43ed-920b-47caed15465f\";"}},{"TEXTURE_TRANSPARENT":{"body":["TEXTURE_TRANSPARENT${0}"],"prefix":"TEXTURE_TRANSPARENT","description":"string TEXTURE_TRANSPARENT = \"8dcd4a48-2d37-4909-9f78-f7a9eb4ef903\";"}},{"TOUCH_INVALID_FACE":{"body":["TOUCH_INVALID_FACE${0}"],"prefix":"TOUCH_INVALID_FACE","description":"integer TOUCH_INVALID_FACE = 0xFFFFFFFF;"}},{"TOUCH_INVALID_TEXCOORD":{"body":["TOUCH_INVALID_TEXCOORD${0}"],"prefix":"TOUCH_INVALID_TEXCOORD","description":"vector TOUCH_INVALID_TEXCOORD = <-1.0, -1.0, 0.0>;"}},{"TOUCH_INVALID_VECTOR":{"body":["TOUCH_INVALID_VECTOR${0}"],"prefix":"TOUCH_INVALID_VECTOR","description":"vector TOUCH_INVALID_VECTOR = <0.0, 0.0, 0.0>;"}},{"TRAVERSAL_TYPE":{"body":["TRAVERSAL_TYPE${0}"],"prefix":"TRAVERSAL_TYPE","description":"integer TRAVERSAL_TYPE = 7;"}},{"TRUE":{"body":["TRUE${0}"],"prefix":"TRUE","description":"integer TRUE = 1;"}},{"TWO_PI":{"body":["TWO_PI${0}"],"prefix":"TWO_PI","description":"float TWO_PI = 6.283185307179586476925286766559f;"}},{"TYPE_FLOAT":{"body":["TYPE_FLOAT${0}"],"prefix":"TYPE_FLOAT","description":"integer TYPE_FLOAT = 2;"}},{"TYPE_INTEGER":{"body":["TYPE_INTEGER${0}"],"prefix":"TYPE_INTEGER","description":"integer TYPE_INTEGER = 1;"}},{"TYPE_INVALID":{"body":["TYPE_INVALID${0}"],"prefix":"TYPE_INVALID","description":"integer TYPE_INVALID = 0;"}},{"TYPE_KEY":{"body":["TYPE_KEY${0}"],"prefix":"TYPE_KEY","description":"integer TYPE_KEY = 4;"}},{"TYPE_ROTATION":{"body":["TYPE_ROTATION${0}"],"prefix":"TYPE_ROTATION","description":"integer TYPE_ROTATION = 6;"}},{"TYPE_STRING":{"body":["TYPE_STRING${0}"],"prefix":"TYPE_STRING","description":"integer TYPE_STRING = 3;"}},{"TYPE_VECTOR":{"body":["TYPE_VECTOR${0}"],"prefix":"TYPE_VECTOR","description":"integer TYPE_VECTOR = 5;"}},{"URL_REQUEST_DENIED":{"body":["URL_REQUEST_DENIED${0}"],"prefix":"URL_REQUEST_DENIED","description":"string URL_REQUEST_DENIED = \"URL_REQUEST_DENIED\";"}},{"URL_REQUEST_GRANTED":{"body":["URL_REQUEST_GRANTED${0}"],"prefix":"URL_REQUEST_GRANTED","description":"string URL_REQUEST_GRANTED = \"URL_REQUEST_GRANTED\";"}},{"VEHICLE_FLAG_NO_FLY_UP":{"body":["VEHICLE_FLAG_NO_FLY_UP${0}"],"prefix":"VEHICLE_FLAG_NO_FLY_UP","description":"integer VEHICLE_FLAG_NO_DEFLECTION_UP = 0x001;"}},{"VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY":{"body":["VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY${0}"],"prefix":"VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY","description":"integer VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY = 32;"}},{"VEHICLE_ANGULAR_DEFLECTION_TIMESCALE":{"body":["VEHICLE_ANGULAR_DEFLECTION_TIMESCALE${0}"],"prefix":"VEHICLE_ANGULAR_DEFLECTION_TIMESCALE","description":"integer VEHICLE_ANGULAR_DEFLECTION_TIMESCALE = 33;"}},{"VEHICLE_ANGULAR_FRICTION_TIMESCALE":{"body":["VEHICLE_ANGULAR_FRICTION_TIMESCALE${0}"],"prefix":"VEHICLE_ANGULAR_FRICTION_TIMESCALE","description":"integer VEHICLE_ANGULAR_FRICTION_TIMESCALE = 17;"}},{"VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE":{"body":["VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE${0}"],"prefix":"VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE","description":"integer VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE = 35;"}},{"VEHICLE_ANGULAR_MOTOR_DIRECTION":{"body":["VEHICLE_ANGULAR_MOTOR_DIRECTION${0}"],"prefix":"VEHICLE_ANGULAR_MOTOR_DIRECTION","description":"integer VEHICLE_ANGULAR_MOTOR_DIRECTION = 19;"}},{"VEHICLE_ANGULAR_MOTOR_TIMESCALE":{"body":["VEHICLE_ANGULAR_MOTOR_TIMESCALE${0}"],"prefix":"VEHICLE_ANGULAR_MOTOR_TIMESCALE","description":"integer VEHICLE_ANGULAR_MOTOR_TIMESCALE = 34;"}},{"VEHICLE_BANKING_EFFICIENCY":{"body":["VEHICLE_BANKING_EFFICIENCY${0}"],"prefix":"VEHICLE_BANKING_EFFICIENCY","description":""}},{"VEHICLE_BANKING_MIX":{"body":["VEHICLE_BANKING_MIX${0}"],"prefix":"VEHICLE_BANKING_MIX","description":"integer VEHICLE_BANKING_MIX = 39;"}},{"VEHICLE_BANKING_TIMESCALE":{"body":["VEHICLE_BANKING_TIMESCALE${0}"],"prefix":"VEHICLE_BANKING_TIMESCALE","description":"integer VEHICLE_BANKING_TIMESCALE = 40;"}},{"VEHICLE_BUOYANCY":{"body":["VEHICLE_BUOYANCY${0}"],"prefix":"VEHICLE_BUOYANCY","description":"integer VEHICLE_BUOYANCY = 27;"}},{"VEHICLE_FLAG_CAMERA_DECOUPLED":{"body":["VEHICLE_FLAG_CAMERA_DECOUPLED${0}"],"prefix":"VEHICLE_FLAG_CAMERA_DECOUPLED","description":"integer VEHICLE_FLAG_CAMERA_DECOUPLED = 0x200;"}},{"VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT":{"body":["VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT${0}"],"prefix":"VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT","description":"integer VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT = 0x010;"}},{"VEHICLE_FLAG_HOVER_TERRAIN_ONLY":{"body":["VEHICLE_FLAG_HOVER_TERRAIN_ONLY${0}"],"prefix":"VEHICLE_FLAG_HOVER_TERRAIN_ONLY","description":"integer VEHICLE_FLAG_HOVER_TERRAIN_ONLY = 0x008;"}},{"VEHICLE_FLAG_HOVER_UP_ONLY":{"body":["VEHICLE_FLAG_HOVER_UP_ONLY${0}"],"prefix":"VEHICLE_FLAG_HOVER_UP_ONLY","description":"integer VEHICLE_FLAG_HOVER_UP_ONLY = 0x020;"}},{"VEHICLE_FLAG_HOVER_WATER_ONLY":{"body":["VEHICLE_FLAG_HOVER_WATER_ONLY${0}"],"prefix":"VEHICLE_FLAG_HOVER_WATER_ONLY","description":"integer VEHICLE_FLAG_HOVER_WATER_ONLY = 0x004;"}},{"VEHICLE_FLAG_LIMIT_MOTOR_UP":{"body":["VEHICLE_FLAG_LIMIT_MOTOR_UP${0}"],"prefix":"VEHICLE_FLAG_LIMIT_MOTOR_UP","description":"integer VEHICLE_FLAG_LIMIT_MOTOR_UP = 0x080;"}},{"VEHICLE_FLAG_LIMIT_ROLL_ONLY":{"body":["VEHICLE_FLAG_LIMIT_ROLL_ONLY${0}"],"prefix":"VEHICLE_FLAG_LIMIT_ROLL_ONLY","description":"integer VEHICLE_FLAG_LIMIT_ROLL_ONLY = 0x002;"}},{"VEHICLE_FLAG_MOUSELOOK_BANK":{"body":["VEHICLE_FLAG_MOUSELOOK_BANK${0}"],"prefix":"VEHICLE_FLAG_MOUSELOOK_BANK","description":"integer VEHICLE_FLAG_MOUSELOOK_BANK = 0x200;"}},{"VEHICLE_FLAG_MOUSELOOK_STEER":{"body":["VEHICLE_FLAG_MOUSELOOK_STEER${0}"],"prefix":"VEHICLE_FLAG_MOUSELOOK_STEER","description":"integer VEHICLE_FLAG_MOUSELOOK_STEER = 0x100;"}},{"VEHICLE_FLAG_NO_DEFLECTION_UP":{"body":["VEHICLE_FLAG_NO_DEFLECTION_UP${0}"],"prefix":"VEHICLE_FLAG_NO_DEFLECTION_UP","description":"integer VEHICLE_FLAG_NO_DEFLECTION_UP = 0x001;"}},{"VEHICLE_HOVER_EFFICIENCY":{"body":["VEHICLE_HOVER_EFFICIENCY${0}"],"prefix":"VEHICLE_HOVER_EFFICIENCY","description":"integer VEHICLE_HOVER_EFFICIENCY = 25;"}},{"VEHICLE_HOVER_HEIGHT":{"body":["VEHICLE_HOVER_HEIGHT${0}"],"prefix":"VEHICLE_HOVER_HEIGHT","description":"integer VEHICLE_HOVER_HEIGHT = 24;"}},{"VEHICLE_HOVER_TIMESCALE":{"body":["VEHICLE_HOVER_TIMESCALE${0}"],"prefix":"VEHICLE_HOVER_TIMESCALE","description":"integer VEHICLE_HOVER_TIMESCALE = 26;"}},{"VEHICLE_LINEAR_DEFLECTION_EFFICIENCY":{"body":["VEHICLE_LINEAR_DEFLECTION_EFFICIENCY${0}"],"prefix":"VEHICLE_LINEAR_DEFLECTION_EFFICIENCY","description":"integer VEHICLE_LINEAR_DEFLECTION_EFFICIENCY = 28;"}},{"VEHICLE_LINEAR_DEFLECTION_TIMESCALE":{"body":["VEHICLE_LINEAR_DEFLECTION_TIMESCALE${0}"],"prefix":"VEHICLE_LINEAR_DEFLECTION_TIMESCALE","description":"integer VEHICLE_LINEAR_DEFLECTION_TIMESCALE = 31;"}},{"VEHICLE_LINEAR_FRICTION_TIMESCALE":{"body":["VEHICLE_LINEAR_FRICTION_TIMESCALE${0}"],"prefix":"VEHICLE_LINEAR_FRICTION_TIMESCALE","description":"integer VEHICLE_LINEAR_FRICTION_TIMESCALE = 16;"}},{"VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE":{"body":["VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE${0}"],"prefix":"VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE","description":"integer VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE = 31;"}},{"VEHICLE_LINEAR_MOTOR_DIRECTION":{"body":["VEHICLE_LINEAR_MOTOR_DIRECTION${0}"],"prefix":"VEHICLE_LINEAR_MOTOR_DIRECTION","description":"integer VEHICLE_LINEAR_MOTOR_DIRECTION = 18;"}},{"VEHICLE_LINEAR_MOTOR_OFFSET":{"body":["VEHICLE_LINEAR_MOTOR_OFFSET${0}"],"prefix":"VEHICLE_LINEAR_MOTOR_OFFSET","description":"integer VEHICLE_LINEAR_MOTOR_OFFSET = 20;"}},{"VEHICLE_LINEAR_MOTOR_TIMESCALE":{"body":["VEHICLE_LINEAR_MOTOR_TIMESCALE${0}"],"prefix":"VEHICLE_LINEAR_MOTOR_TIMESCALE","description":"integer VEHICLE_LINEAR_MOTOR_TIMESCALE = 30;"}},{"VEHICLE_REFERENCE_FRAME":{"body":["VEHICLE_REFERENCE_FRAME${0}"],"prefix":"VEHICLE_REFERENCE_FRAME","description":"integer VEHICLE_REFERENCE_FRAME = 44;"}},{"VEHICLE_TYPE_AIRPLANE":{"body":["VEHICLE_TYPE_AIRPLANE${0}"],"prefix":"VEHICLE_TYPE_AIRPLANE","description":"integer VEHICLE_TYPE_AIRPLANE = 4;"}},{"VEHICLE_TYPE_BALLOON":{"body":["VEHICLE_TYPE_BALLOON${0}"],"prefix":"VEHICLE_TYPE_BALLOON","description":"integer VEHICLE_TYPE_BALLOON = 5;"}},{"VEHICLE_TYPE_BOAT":{"body":["VEHICLE_TYPE_BOAT${0}"],"prefix":"VEHICLE_TYPE_BOAT","description":"integer VEHICLE_TYPE_BOAT = 3;"}},{"VEHICLE_TYPE_CAR":{"body":["VEHICLE_TYPE_CAR${0}"],"prefix":"VEHICLE_TYPE_CAR","description":"integer VEHICLE_TYPE_CAR = 2;"}},{"VEHICLE_TYPE_NONE":{"body":["VEHICLE_TYPE_NONE${0}"],"prefix":"VEHICLE_TYPE_NONE","description":"integer VEHICLE_TYPE_NONE = 0;"}},{"VEHICLE_TYPE_SLED":{"body":["VEHICLE_TYPE_SLED${0}"],"prefix":"VEHICLE_TYPE_SLED","description":"integer VEHICLE_TYPE_SLED = 1;"}},{"VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY":{"body":["VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY${0}"],"prefix":"VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY","description":"integer VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY = 36;"}},{"VEHICLE_VERTICAL_ATTRACTION_TIMESCALE":{"body":["VEHICLE_VERTICAL_ATTRACTION_TIMESCALE${0}"],"prefix":"VEHICLE_VERTICAL_ATTRACTION_TIMESCALE","description":"integer VEHICLE_VERTICAL_ATTRACTION_TIMESCALE = 37;"}},{"VERTICAL":{"body":["VERTICAL${0}"],"prefix":"VERTICAL","description":"integer VERTICAL = 0;"}},{"ZERO_ROTATION":{"body":["ZERO_ROTATION${0}"],"prefix":"ZERO_ROTATION","description":"rotation ZERO_ROTATION = <0.0, 0.0, 0.0, 1.0>;"}},{"ZERO_VECTOR":{"body":["ZERO_VECTOR${0}"],"prefix":"ZERO_VECTOR","description":"vector ZERO_VECTOR = <0.0, 0.0, 0.0>;"}},{"do...while loop":{"prefix":"do","body":["do","{","\t$0","} while (${true});"],"description":"do...while loop"},"for loop":{"prefix":"for","body":["integer ${i};","for (${i} = 0; ${i} < ${length}; ${i}++)","{","\t$0","}"],"description":"for loop"},"Reverse for loop":{"prefix":"forr","body":["integer ${i};","for ({i} = ${length} - 1; {i} >= 0; {i}--)","{","\t$0","}"],"description":"Reverse for loop"},"if statement":{"prefix":"if","body":["if (${true})","{","\t$0","}"],"description":"if statement"},"else statement":{"prefix":"else","body":["else","{","\t$0","}"],"description":"else statement"},"while loop":{"prefix":"while","body":["while (${true})","{","\t$0","}"],"description":"while loop"},"attach":{"prefix":"attach","body":["attach(key ${1:id})\n{\n\t$0\n}"],"description":"event"},"at_rot_target":{"prefix":"at_rot_target","body":["at_rot_target(integer ${1:tnum}, rotation ${2:targetrot}, rotation ${3:ourrot})\n{\n\t$0\n}"],"description":"event"},"at_target":{"prefix":"at_target","body":["at_target(integer ${1:tnum}, vector ${2:targetpos}, vector ${3:ourpos})\n{\n\t$0\n}"],"description":"event"},"changed":{"prefix":"changed","body":["changed(integer ${1:change})\n{\n\t$0\n}"],"description":"event"},"collision":{"prefix":"collision","body":["collision(integer ${1:num_detected})\n{\n\t$0\n}"],"description":"event"},"collision_end":{"prefix":"collision_end","body":["collision_end(integer ${1:num_detected})\n{\n\t$0\n}"],"description":"event"},"collision_start":{"prefix":"collision_start","body":["collision_start(integer ${1:num_detected})\n{\n\t$0\n}"],"description":"event"},"control":{"prefix":"control","body":["control(key ${1:id}, integer ${2:level}, integer ${3:edge})\n{\n\t$0\n}"],"description":"event"},"dataserver":{"prefix":"dataserver","body":["dataserver(key ${1:queryid}, string ${2:data})\n{\n\t$0\n}"],"description":"event"},"email":{"prefix":"email","body":["email(string ${1:time}, string ${2:address}, string ${3:subj}, string ${4:message}, integer ${5:num_left})\n{\n\t$0\n}"],"description":"event"},"experience_permissions":{"prefix":"experience_permissions","body":["experience_permissions(key ${1:agent})\n{\n\t$0\n}"],"description":"event"},"experience_permissions_denied":{"prefix":"experience_permissions_denied","body":["experience_permissions_denied(key ${1:agent}, integer ${2:reason})\n{\n\t$0\n}"],"description":"event"},"http_request":{"prefix":"http_request","body":["http_request(key ${1:id}, string ${2:method}, string ${3:body})\n{\n\t$0\n}"],"description":"event"},"http_response":{"prefix":"http_response","body":["http_response(key ${1:request_id}, integer ${2:status}, list ${3:metadata}, string ${4:body})\n{\n\t$0\n}"],"description":"event"},"land_collision":{"prefix":"land_collision","body":["land_collision(vector ${1:pos})\n{\n\t$0\n}"],"description":"event"},"land_collision_end":{"prefix":"land_collision_end","body":["land_collision_end(vector ${1:pos})\n{\n\t$0\n}"],"description":"event"},"land_collision_start":{"prefix":"land_collision_start","body":["land_collision_start(vector ${1:pos})\n{\n\t$0\n}"],"description":"event"},"link_message":{"prefix":"link_message","body":["link_message(integer ${1:sender_num}, integer ${2:num}, string ${3:str}, key ${4:id})\n{\n\t$0\n}"],"description":"event"},"listen":{"prefix":"listen","body":["listen(integer ${1:channel}, string ${2:name}, key ${3:id}, string ${4:message})\n{\n\t$0\n}"],"description":"event"},"money":{"prefix":"money","body":["money(key ${1:id}, integer ${2:amount})\n{\n\t$0\n}"],"description":"event"},"moving_end":{"prefix":"moving_end","body":["moving_end()\n{\n\t$0\n}"],"description":"event"},"moving_start":{"prefix":"moving_start","body":["moving_start()\n{\n\t$0\n}"],"description":"event"},"not_at_rot_target":{"prefix":"not_at_rot_target","body":["not_at_rot_target()\n{\n\t$0\n}"],"description":"event"},"not_at_target":{"prefix":"not_at_target","body":["not_at_target()\n{\n\t$0\n}"],"description":"event"},"no_sensor":{"prefix":"no_sensor","body":["no_sensor()\n{\n\t$0\n}"],"description":"event"},"object_rez":{"prefix":"object_rez","body":["object_rez(key ${1:id})\n{\n\t$0\n}"],"description":"event"},"on_rez":{"prefix":"on_rez","body":["on_rez(integer ${1:start_param})\n{\n\t$0\n}"],"description":"event"},"path_update":{"prefix":"path_update","body":["path_update(integer ${1:type}, list ${2:reserved})\n{\n\t$0\n}"],"description":"event"},"remote_data":{"prefix":"remote_data","body":["remote_data(integer ${1:event_type}, key ${2:channel}, key ${3:message_id}, string ${4:sender}, integer ${5:idata}, string ${6:sdata})\n{\n\t$0\n}"],"description":"event"},"run_time_permissions":{"prefix":"run_time_permissions","body":["run_time_permissions(integer ${1:perm})\n{\n\t$0\n}"],"description":"event"},"sensor":{"prefix":"sensor","body":["sensor(integer ${1:num_detected})\n{\n\t$0\n}"],"description":"event"},"state_entry":{"prefix":"state_entry","body":["state_entry()\n{\n\t$0\n}"],"description":"event"},"state_exit":{"prefix":"state_exit","body":["state_exit()\n{\n\t$0\n}"],"description":"event"},"timer":{"prefix":"timer","body":["timer()\n{\n\t$0\n}"],"description":"event"},"touch":{"prefix":"touch","body":["touch(integer ${1:num_detected})\n{\n\t$0\n}"],"description":"event"},"touch_end":{"prefix":"touch_end","body":["touch_end(integer ${1:num_detected})\n{\n\t$0\n}"],"description":"event"},"touch_start":{"prefix":"touch_start","body":["touch_start(integer ${1:num_detected})\n{\n\t$0\n}"],"description":"event"},"transaction_result":{"prefix":"transaction_result","body":["transaction_result(key ${1:id}, integer ${2:success}, string ${3:data})\n{\n\t$0\n}"],"description":"event"},"default state":{"prefix":"default","body":["default","{","\tstate_entry()\n\t{\n\t\t$0\n\t}","}"],"description":"Default State"},"state target":{"prefix":"state","body":["state ${target}","{","\tstate_entry()\n\t{\n\t\t$0\n\t}","}"]},"reverse for loop":{"prefix":"forr","body":["integer ${i} = ${length} - 1; for (; ${i} >= 0 ; ${i}--)","{","\t$0","}"],"description":"Reverse for loop"},"for loop":{"prefix":"for","body":["integer ${i}; for (;${i} < ${length}; ++${i})","{","\t$0","}"],"description":"for loop"},"while loop":{"prefix":"while","body":["while (${TRUE})","{","\t$0","}"],"description":"While loop"},"do...while loop":{"prefix":"do","body":["do","{","\t$0","} while (${TRUE});"],"description":"do...while loop"},"if statement":{"prefix":"if","body":["if (${TRUE})","{","\t$0","}"],"description":"if statement"},"else statement":{"prefix":"else","body":["else","{","\t$0","}"],"description":"else statement"},"else if statement":{"prefix":"elseif","body":["else if (${TRUE})","{","\t$0","}"],"description":"else if statement."},"Region/x/y/z SLURL":{"prefix":"slurl:region/x/y/z","body":["vector ${v} = llGetPos();","string ${location} = \"/\" + (string)llRound(${v}.x)","\t+ \"/\" + (string)llRound(${v}.y)","\t+ \"/\" + (string)llRound(${v}.z);","string ${slurl} = \"secondlife:///\" + llEscapeURL(${llGetRegionName()}) + ${location};"],"description":"SLURL to Login at / Show place profile with position"},"Agent profile SLURL":{"prefix":"slurl:app/agent/about","body":["string ${slurl} = \"secondlife:///app/agent/\" + (string)${llGetOwner()} + \"/about\";"],"description":"Avatar's profile SLURL"},"Agent info dialog SLURL":{"prefix":"slurl:app/agent/inspect","body":["string ${slurl} = \"secondlife:///app/agent/\" + (string)${llGetOwner()} + \"/inspect\";"],"description":"Avatar information dialog SLURL"},"Agent IM SLURL":{"prefix":"slurl:app/agent/im","body":["string ${slurl} = \"secondlife:///app/agent/\" + (string)${llGetOwner()} + \"/im\";"],"description":"Avatar IM SLURL"},"Agent Complete Name SLURL":{"prefix":"slurl:app/agent/completename","body":["string ${slurl} = \"secondlife:///app/agent/\" + (string)${llGetOwner()} + \"/completename\";"],"description":"Avatar full name SLURL"},"Agent display name SLURL":{"prefix":"slurl:app/agent/displayname","body":["string ${slurl} = \"secondlife:///app/agent/\" + (string)${llGetOwner()} + \"/displayname\";"],"description":"Avatar display name SLURL"},"Agent username SLURL":{"prefix":"slurl:app/agent/username","body":["string ${slurl} = \"secondlife:///app/agent/\" + (string)${llGetOwner()} + \"/username\";"],"description":"Avatar username SLURL"},"About Group SLURL":{"prefix":"slurl:app/group/about","body":["string ${slurl} = \"secondlife:///app/group/\" + ${llList2String(llGetObjectDetails(llGetKey(), [OBJECT_GROUP]), 0)} + \"/about\";"],"description":"About group SLURL"},"Inspect Group SLURL":{"prefix":"slurl:app/group/inspect","body":["string ${slurl} = \"secondlife:///app/group/\" + ${llList2String(llGetObjectDetails(llGetKey(), [OBJECT_GROUP]), 0)} + \"/inspect\";"],"description":"Inspect group SLURL"},"About Parcel SLURL":{"prefix":"slurl:app/parcel/about","body":["string ${slurl} = \"secondlife:///app/parcel/\" + ${llList2String(llGetParcelDetails(llGetPos(), [PARCEL_DETAILS_ID]), 0)} + \"/about\";"],"description":"About Parcel SLURL"},"Direct Teleport SLURL":{"prefix":"slurl:app/teleport/x/y/z","body":["vector ${v} = llGetPos();","string ${location} = \"/\" + (string)llRound(${v}.x)","\t+ \"/\" + (string)llRound(${v}.y)","\t+ \"/\" + (string)llRound(${v}.z);","string ${slurl} = \"secondlife:///app/teleport/\" + llEscapeURL(${llGetRegionName()}) + ${location};"],"Description":"Direct teleport SLURL"},"Region Map SLURL":{"prefix":"slurl:app/worldmap/x/y/z","body":["vector ${v} = llGetPos();","string ${location} = \"/\" + (string)llRound(${v}.x)","\t+ \"/\" + (string)llRound(${v}.y)","\t+ \"/\" + (string)llRound(${v}.z);","string ${slurl} = \"secondlife:///app/worldmap/\" + llEscapeURL(${llGetRegionName()}) + ${location};"],"description":"Region Map SLURL"}}]